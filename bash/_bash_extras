#!env bash
# vim: set tabstop=2 shiftwidth=2 foldmethod=marker:

current_pathinrepo=$( dirname $(readlink -f "${BASH_SOURCE[0]}") )

# Make Bash append rather than overwrite the history on disk
shopt -s histappend

# as per instructions in the script, let's not call ps1_set, but call
# ps1_update inside PROMPT_COMMAND.
if [[ "$PROMPT_COMMAND" != *"ps1_update"* ]]; then
  export PROMPT_COMMAND="history -a; ps1_update --notime --prompt ‚ùØ"
fi
[[ -s "${current_pathinrepo}/ps1_functions" ]] && source "${current_pathinrepo}/ps1_functions"

# bash autojump, appends to PROMPT_COMMAND
[[ -s ~/.autojump/etc/profile.d/autojump.sh  ]] && . ~/.autojump/etc/profile.d/autojump.sh

_dotfiles_preexec () {
  # Set the tmux pane title before executing a command, see man tmux
  echo -ne "\033]2;$1\033\\"
}
# used to guard execution of _dotfiles_preexec
_dotfiles_guard_preexec () {
  [ -n "$COMP_LINE" ] && return  # do nothing if completing
  [ "$BASH_COMMAND" = "$PROMPT_COMMAND" ] && return # don't cause a _dotfiles_preexec for $PROMPT_COMMAND
  local this_command=`history 1 | sed -e "s/^[ ]*[0-9]*[ ]*//g"`;
  _dotfiles_preexec "$this_command"
}
trap '_dotfiles_guard_preexec' DEBUG
# reset tmux pane title after command execution, i.e. during PROMPT_COMMAND exection
if [[ "$PROMPT_COMMAND" != *"_reset_tmux_pane_title"* ]]; then
  export PROMPT_COMMAND="$PROMPT_COMMAND ; _dotfiles_preexec ''"
fi

if [[ ! ( "$PATH" == *"$HOME/local/bin:$HOME/.composer/vendor/bin"* ) ]]; then
  export PATH=$HOME/local/bin:$HOME/.composer/vendor/bin:$PATH
fi

# if autojump path is at the beginning it's a duplicate
if [[ ( "$PATH" == "$HOME/.autojump/bin"* ) ]]; then
  PATH=${PATH#$HOME/.autojump/bin:}
fi

export EDITOR=vim
HISTFILESIZE=80000
HISTSIZE=5000

# disable <CTRL-S> and <CTRL-Q> terminal settings, I want to use them in vim
# maybe there's a better way, see :h term.txt in vim
stty stop undef
stty start undef

[ -n "$PS1" ] && whatis $(ls ${PATH//:/ } 2>/dev/null| shuf -n 1)

if [ "$TERM" = "xterm" -a "$COLORTERM" = "gnome-terminal" ]; then
    TERM="xterm-256color"
fi

HISTIGNORE="clear:bg:fg:cd:cd -:exit:date:w:"

# rvm enable+completion+prompt {{{
# Load RVM into a shell session *as a function*
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"
[[ -s "$rvm_path/scripts/completion" ]] && source "$rvm_path/scripts/completion"
#}}}

# Less Colors for Man Pages
export LESS_TERMCAP_mb=$'\E[01;31m'       # begin blinking
export LESS_TERMCAP_md=$'\E[01;38;5;74m'  # begin bold
export LESS_TERMCAP_me=$'\E[0m'           # end mode
export LESS_TERMCAP_se=$'\E[0m'           # end standout-mode
export LESS_TERMCAP_so=$'\E[38;5;246m'    # begin standout-mode - info box
export LESS_TERMCAP_ue=$'\E[0m'           # end underline
export LESS_TERMCAP_us=$'\E[04;38;5;146m' # begin underline

# load my private stuff
[[ -s "${DOTFILESREPO}/private/bash/_bash_aliases" ]] && source "${DOTFILESREPO}/private/bash/_bash_aliases"

# oh god, this feels good
[[ -n "$DISPLAY" ]] && xset r rate 200 90

# back up file with timestamp
# useful for administrators and configs
bu () {
    filename=$1
    filetime=$(date +%Y%m%d_%H%M%S)
    cp ${filename} ${filename}_${filetime}
}

# scm_breeze {{{
export scmbDir="${current_pathinrepo}/scm_breeze"
# Shared functions
. "$scmbDir/lib/scm_breeze.sh"
# Git
if [[ -s "$HOME/.git.scmbrc" ]]; then
  # Load git config
  source "$HOME/.git.scmbrc"
  source "$scmbDir/lib/git/helpers.sh"
  source "$scmbDir/lib/git/aliases.sh"
  source "$scmbDir/lib/git/keybindings.sh"
  source "$scmbDir/lib/git/status_shortcuts.sh"
  source "$scmbDir/lib/git/branch_shortcuts.sh"
  source "$scmbDir/lib/git/shell_shortcuts.sh"
  source "$scmbDir/lib/git/repo_index.sh"
  source "$scmbDir/lib/git/tools.sh"
  if ! type ruby > /dev/null 2>&1; then
    # If Ruby is not installed, fall back to the
    # slower bash/zsh implementation of 'git_status_shortcuts'
    source "$scmbDir/lib/git/fallback/status_shortcuts_shell.sh"
  fi
fi
# }}}

function ff() { echo "*$**" ; find . -type f -iname "*$**" ; }
function whichpkg() { PACKAGE=$(dpkg -S $(which $1) | cut -d':' -f1); echo "[${PACKAGE}]"; dpkg -s "${PACKAGE}" ;}

# old notes {{{
# PS1 overrides the one from .bashrc. Color prompt by default
# the title of xterms is set only to \w (the current working directory,
# with $HOME abbreviated with a tilde)
# See man bash (PROMPTING), http://en.wikipedia.org/wiki/ANSI_escape_code
# \033=\e esempio: \e[01;32m sets normal, then bold (not really sure why you
# can use more than 1 char), then green.
#
# We now use the ps1_functions above
#PS1='\[\e]0;${GROTA_TITLE:-\w}\a\]${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\] \w\[\033[00m\]\$ '
# }}}
