#!/usr/bin/env bash
# vim: set tabstop=2 shiftwidth=2 foldmethod=marker:

# fzf {{{
# Get binaries from https://github.com/junegunn/fzf-bin/releases
__fzf_history__() (
  local line
  shopt -u nocaseglob nocasematch
  line=$(
    HISTTIMEFORMAT= history |
    fzf +s --tac +m -n2..,.. --tiebreak=index --toggle-sort=ctrl-r |
    \grep '^ *[0-9]') &&
    if [[ $- =~ H ]]; then
      sed 's/^ *\([0-9]*\)\** .*/!\1/' <<< "$line"
    else
      sed 's/^ *\([0-9]*\)\** *//' <<< "$line"
    fi
)
bind '"\er": redraw-current-line'
bind '"\e^": history-expand-line'
bind '"\C-r": " \C-e\C-u$(__fzf_history__)\e\C-e\e^\er"'

_fzf_handle_dynamic_completion() {
  local cmd orig ret orig_cmd
  cmd="$1"
  shift
  orig_cmd="$1"

  orig=$(eval "echo \$_fzf_orig_completion_$cmd")
  if [ -n "$orig" ] && type "$orig" > /dev/null 2>&1; then
    $orig "$@"
  elif [ -n "$_fzf_completion_loader" ]; then
    _completion_loader "$@"
    ret=$?
    eval $(complete | \grep "\-F.* $orig_cmd$" | _fzf_orig_completion_filter)
    source $BASH_SOURCE
    return $ret
  fi
}
_fzf_path_completion() {
  local cur base dir leftover matches trigger cmd fzf
  [ ${FZF_TMUX:-1} -eq 1 ] && fzf="fzf-tmux -d ${FZF_TMUX_HEIGHT:-40%}" || fzf="fzf"
  fzf="fzf"
  cmd=$(echo ${COMP_WORDS[0]} | sed 's/[^a-z0-9_=]/_/g')
  COMPREPLY=()
  trigger=${FZF_COMPLETION_TRIGGER-'**'}
  cur="${COMP_WORDS[COMP_CWORD]}"
  if [[ ${cur} == *"$trigger" ]]; then
    base=${cur:0:${#cur}-${#trigger}}
    eval base=$base

    dir="$base"
    while [ 1 ]; do
      if [ -z "$dir" -o -d "$dir" ]; then
        leftover=${base/#"$dir"}
        leftover=${leftover/#\/}
        [ "$dir" = './' ] && dir=''
        tput sc
        matches=$(find -L "$dir"* $1 2> /dev/null | $fzf $FZF_COMPLETION_OPTS $2 -q "$leftover" | while read item; do
          printf "%q$3 " "$item"
        done)
        matches=${matches% }
        if [ -n "$matches" ]; then
          COMPREPLY=( "$matches" )
        else
          COMPREPLY=( "$cur" )
        fi
        tput rc
        return 0
      fi
      dir=$(dirname "$dir")
      [[ "$dir" =~ /$ ]] || dir="$dir"/
    done
  else
    shift
    shift
    shift
    _fzf_handle_dynamic_completion "$cmd" "$@"
  fi
}
_fzf_dir_completion() {
  _fzf_path_completion \
    "-name .git -prune -o -name .svn -prune -o -type d -print" \
    "" "/" "$@"
}
complete -F _fzf_dir_completion -o nospace -o plusdirs cd

function _my_fzf_dir_completion() {
  local cur MAX_NUM_OF_DIRS match_fav match match_dir
  # save the cursor position, see below as to why
  tput sc
  COMPREPLY=()
  cur="${COMP_WORDS[COMP_CWORD]}"
  #fallback to normal cd completion if empty or not regex match to /
  if [[ (-z "$cur") ||  ( ! ( "$cur" =~ (/.*){2} ) && ("$PWD" != "$HOME")) ]]; then
    return
  fi
  IFS=$'\n'
  MAX_NUM_OF_DIRS=1000;
  # use only "favorites" for home
  if [[ "$PWD" != "$HOME" ]]; then
    # for dirs with space in it need to unquote the cur value, so we remove the \
    match_dir="$(find_breadth_first_dirs $MAX_NUM_OF_DIRS ${cur//\\/})"
  else
    match_dir=""
  fi
  match_fav="$(tac ~/.local/share/autojump/autojump.txt|cut -f 2|sort)"
  match=$(echo -e "$match_fav\r\n$match_dir"| fzf -q "${cur//\\/}")
  # don't specify $cur after the --, otherwise compgen filters out
  # unmatching (wrt $cur) paths that instead we want
  COMPREPLY=($(compgen -W "$match" --))
  IFS=$' \t\n'
  # ruby's curses stdlib does not play well with the cursor position,
  # we saved the position before and now we restore it
  tput rc
}

#for cmd in "cd"; do
  #complete -o bashdefault -o filenames -o default -F _my_fzf_dir_completion $cmd
#done

# This function finds the directories below the current one in
# a breadth-first fashion, this is because we want to be sure to
# get the shallowest dirs. Doing find ... | head -n 2000
# stops find after 2000 results but does not guarantee that we
# end up with the shallowest ones.
# This is wasteful but there doesn't seems to be a better way
# Optional param: MAX_RESULTS
function find_breadth_first_dirs () {
  local result depth MAX_RESULTS level_result
  depth=0
  # use a default for MAX_RESULTS if not provided
  if [ -z "$1" ]; then
    MAX_RESULTS=2000
  else
    MAX_RESULTS=$1
  fi
  level_result=1
  while [[ ( -n "$level_result" ) ]]; do
    depth=$((depth + 1))
    # execute find for the current level depth
    level_result=$(_find_for_level $depth "$2")
    # stupid hack to avoid a newline at the beginning
    if [[ $depth -lt 2 ]]; then
      result+=$(echo "${level_result}")
    else
      result+=$(echo -e "\r\n${level_result}")
    fi
    # stop and prune if we reached the maximum
    if [[ ( $(echo "$result" | wc -l) -gt $MAX_RESULTS ) ]]; then
      result=$(echo "$result" | head -n $MAX_RESULTS)
    fi
  done
  # bash functions are stupid, this is the only way of returning that I could find
  echo "$result"
}

# Utility function used by find_breadth_first_dirs that finds dirs at level x, where x is the input param
function _find_for_level () {
  local temp
  if [ -z "$1" ]; then return 1; fi
  # Using -regex '\./.git.*' -prune doesn't seem to work when using maxdepth/mindepth
  temp=$(find "$2" -maxdepth "$1" -mindepth "$1" -type d -print 2> /dev/null| \grep -v '\.git')
  echo "$temp"
}
#}}}

