" vim:ft=vim:foldmethod=marker:foldcolumn=3:foldlevel=0
" INITIALIZATION "{{{
set nocompatible
if empty(glob("~/.vim/autoload/plug.vim"))
    execute '!curl -fLo ~/.vim/autoload/plug.vim https://raw.github.com/junegunn/vim-plug/master/plug.vim'
endif

call plug#begin('~/.vim/plugged')
" self require, for help.
Plug 'junegunn/vim-plug'
Plug 'justinmk/vim-sneak'
Plug 'maxbrunsfeld/vim-yankstack'
Plug 'editorconfig/editorconfig-vim'
Plug 'junegunn/vim-easy-align'
Plug 'phpactor/phpactor', {'for': 'php', 'tag': '*', 'do': 'composer install --no-dev -o'}
Plug 'AndrewRadev/linediff.vim'
Plug 'AndrewRadev/splitjoin.vim'
Plug 'airblade/vim-gitgutter'
Plug 'kana/vim-textobj-user'
Plug 'thinca/vim-textobj-between'
Plug 'guns/xterm-color-table.vim', {'on': 'XtermColorTable'}
Plug 'preservim/nerdcommenter'
Plug 'wellle/targets.vim'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-vinegar'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-abolish'
Plug 'preservim/tagbar'
Plug 'tommcdo/vim-exchange'
Plug 'dense-analysis/ale'
Plug 'SirVer/ultisnips'
Plug 'vim-vdebug/vdebug'
Plug 'ludovicchabant/vim-gutentags'
Plug 'jiangmiao/auto-pairs'
Plug 'zef/vim-cycle'
Plug 'stefandtw/quickfix-reflector.vim'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'mbbill/undotree'
Plug 'mhinz/vim-grepper'
Plug 'lfv89/vim-interestingwords'
Plug 'pbogut/fzf-mru.vim'
Plug 'haya14busa/vim-asterisk'
Plug 'christoomey/vim-tmux-navigator'
Plug 'junegunn/gv.vim'
Plug 'jwalton512/vim-blade'
if has('nvim')
  Plug 'neovim/nvim-lspconfig'
  Plug 'kyazdani42/nvim-web-devicons'
  Plug 'folke/lsp-colors.nvim'
  Plug 'gennaro-tedesco/nvim-peekup'
  Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate', 'branch' : '0.5-compat'}
  Plug 'gfanto/fzf-lsp.nvim'
  Plug 'lukas-reineke/indent-blankline.nvim'
endif
call plug#end()

if has("gui_running")
  " a nice coloscheme easy to the eye, it sets the 'background' option
  colorscheme koehler
  " Hide the Toolbar
  set guioptions-=T
  " Don't load $VIMRUNTIME/menu.vim
  set guioptions+=M
  " Hide the Menu
  set guioptions-=m
  set guiheadroom=0
  " Set gui font
  set guifont=Monospace\ 10
else
  set background=dark
endif
if has('nvim')
  set termguicolors
endif
colorscheme grota
"}}}

" Meta mappings {{{
" Automatic mapping of <M-> keys. I think there's room to explore
" <M-S-> mapping using toupper see http://vim.wikia.com/wiki/VimTip738
if !has('nvim')
  let s:c='a'
  while s:c <= 'z'
    exec "set <M-".(s:c).">=\e".s:c
    exec "imap \e".s:c." <M-".(s:c).">"
    let s:c = nr2char(1+char2nr(s:c))
  endwhile
  let s:c='0'
  while s:c <= '9'
    exec "set <M-".(s:c).">=\e".s:c
    exec "imap \e".s:c." <M-".(s:c).">"
    let s:c = nr2char(1+char2nr(s:c))
  endwhile
  set <M-/>=/
  set <M-'>='
  set <M-;>=;
  set <M-->=-
  set <M-=>==
  set <M-`>=`
  set <M-!>=!
  set <M-~>=~
  set <M-\|>=|
endif
"}}}

" VIM OPTIONS {{{
let mapleader = "\<Space>"
set scrolloff=1 "keep 1 line above and below the cursor
"set mouse=a " let's try using the mouse for a while
set ignorecase " ignore case if search pattern is all lowercase, case-sensitive otherwise
set smartcase
set showcmd " show partial command on last line
set autoindent
set smartindent " extends indent functionalites of autoindent. works well for C-like sources
set expandtab " expandtab to spaces
set shiftwidth=2 " shiftwidth: Number of spaces to use for each step of (auto)indent.
set tabstop=2 " tabstop: Number of spaces that a <Tab> in the file counts for.
set shiftround " use multiple of shiftwidth when indenting with '<' and '>'
set hls " highlist searches (set hlsearch). Use :noh[lsearch] to disable temporarily
set list " show the listchars in vim
set listchars=tab:‚ñ∏\ ,trail:¬∑,extends:‚ùØ,nbsp:¬∑,precedes:‚ùÆ
set showbreak=‚Ü™
set history=400
set backspace=indent,eol,start
set hidden " simply hide a modified buffer when switching to another.
set gdefault " search/replace globally (on a line) by default
set pastetoggle=<F9>
set sidescrolloff=37 "keep N chars at the left and right of the cursor, see also sidescroll below
set sidescroll=12 "When vim needs to scroll horizontally do it smoothly by moving 12 chars. 1 is not enough
set cursorline " the line the cursor is on is underlined
set wildmenu
set wildmode=longest,full
set wildignore+=.hg,.git,.svn   " Version control
set dir-=. " remove current dir as a possibility of where to save the swap file
set nobackup " default is already off, but just to be sure.
"set splitbelow " horizontal split below as default
set splitright " vertical split on the right as default
set whichwrap=b,s,<,>,[,] "left and right, in insert e normal mode wrap lines
set ruler
set laststatus=2 " when to show the extra status line: 2=always, 1=only if there are at least two windows
set keymodel=startsel
" This will look in the directory of the current file for 'tags', and work up the tree towards root until one is found.
set tags=./tags;
set completeopt=menuone,noinsert,noselect
" Avoid showing message extra message when using completion
set shortmess+=c
set virtualedit+=block,onemore
if !has('nvim')
  set clipboard=autoselect,exclude:cons\|linux
endif
" don't use the tag file for i_<C-N> and i_<C-P>
" for php, omnicomplete in autoload/phpcomplete.vim already does that
set complete-=t
" and no included files either
set complete-=i
" choose what to save in the session files.
" disable the useless ones and
" the ones that we already load from the .vimrc
set sessionoptions-=options
set sessionoptions-=help
set sessionoptions-=blank
" fold are dynamically created, we also expand all folds
" upon BufReadPost *.php, see after/plugin/after_actions.vim
set sessionoptions-=folds
set foldmethod=syntax
" defaults is no folds closed
set foldlevelstart=99
" used for knowing when to save to the swap file and for the CursorHold event
set updatetime=500
set encoding=utf-8
set showtabline=2
"set tabline=%!GrotaTabLine()
set fillchars-=vert:\|
" Don't consider 007 as octal for <C-a> <C-x> purposes
set nrformats-=octal
" Insert only one space when joining lines that contain sentence-terminating
" punctuation like `.`.
set nojoinspaces
set formatoptions+=j
set noshowmode
set viminfo='400,<50,s10,h
"}}}

" VIM PLAIN MAPPINGS {{{
" EASIER NAVIGATION {{{
" VERY OPINIONATED REMAPPINGS {{{
nnoremap <leader><space> :
xnoremap <leader><space> :
nnoremap \ `
nnoremap <M-'> g_l
xnoremap <M-'> g_l
nnoremap <M-;> ^
xnoremap <M-;> ^
inoremap <M-'> <C-o>$
inoremap <M-Right> <C-o>$
inoremap <M-;> <C-o>^
inoremap <M-Left> <C-o>^
inoremap jj <Esc>
"}}}
" USE <M-LEFT/RIGHT> TO Navigate Tabs {{{
nnoremap <silent> <M-Left> :<C-u>tabprevious<CR>
nnoremap <silent> <M-Right> :<C-u>tabnext<CR>
" }}}
" USE nix_<M-HJKL> TO MOVE IN FINER STEPS {{{
inoremap <M-k> <C-o>gk
inoremap <M-j> <C-o>gj
inoremap <M-h> <left>
inoremap <M-l> <right>
nnoremap <M-k> gk
nnoremap <M-j> gj
nnoremap <M-h> <left>
nnoremap <M-l> <right>
xnoremap <M-k> gk
xnoremap <M-j> gj
xnoremap <M-h> <left>
xnoremap <M-l> <right>
"}}}
" USE nix_<C-HJKL> TO MOVE BETWEEN WORDS {{{
inoremap <C-l> <C-o>E<Right>
inoremap <C-h> <C-o>B
inoremap <C-j> <C-o>gj
inoremap <C-k> <C-o>gk
nnoremap <C-l> E<Right>
nnoremap <C-h> B
nnoremap <C-j> 3gj
nnoremap <C-k> 3gk
xnoremap <C-l> E<Right>
xnoremap <C-h> B
xnoremap <C-j> 3gj
xnoremap <C-k> 3gk
" }}}
" <C-Up/Down/Left/Right>: EASY WINDOW RESIZING {{{
nnoremap <silent> <C-Left>  3<C-W><
nnoremap <silent> <C-Down>  3<C-W>-
nnoremap <silent> <C-Up>    3<C-W>+
nnoremap <silent> <C-Right> 3<C-W>>
"}}}
" <C-W>{} WINDOW SWAPPING {{{
nnoremap <C-w>{ <C-w>R
nnoremap <C-w>} <C-w>r
" }}}
" WINDOWS SPLIT/MAXIMIZE/CLOSE/ONLY/CYCLE {{{
" cycle through windows
nnoremap <tab> <C-W>w
nnoremap <S-tab> <C-W>W
" Close/Only window
nnoremap <F1> <C-W>o:diffoff<CR>:doautocmd User GrotaDiffOff<CR>
inoremap <F1> <Nop>
nnoremap <F2> <C-W>c
" Go to the alternate file in a split window
nnoremap <C-^> :vertical split #<CR>
nnoremap <leader>bd :bd!<CR>
"}}}
" TABS OPEN/CLOSE/NAVIGATE {{{
nnoremap <F3> <C-W>T
nnoremap <F4> :<C-u>tabclose<CR>
nnoremap <F5> :<C-u>tabedit<CR>
nnoremap <silent> <M-1> :<C-u>tabprevious<CR>
inoremap <silent> <M-1> <Esc>:<C-u>tabprevious<CR>
nnoremap <silent> <M-2> :<C-u>tabnext<CR>
inoremap <silent> <M-2> <Esc>:<C-u>tabnext<CR>
nnoremap <silent> <M-!> :<C-u>tabmove -1<CR>
inoremap <silent> <M-!> <Esc>:<C-u>tabmove -1<CR>
nnoremap <silent> <M-@> :<C-u>tabmove +1<CR>
inoremap <silent> <M-@> <Esc>:<C-u>tabmove +1<CR>
" }}}
" <C-Up/Down/Left/Right><M-Up/Down/Left/Right> FOR TMUX {{{
if $TMUX !=# '' && !has('nvim')
  set <C-Right>=[1;5C
  set <C-Left>=[1;5D
  nmap [1;5A <C-Up>
  imap [1;5A <C-Up>
  xmap [1;5A <C-Up>
  nmap [1;5B <C-Down>
  imap [1;5B <C-Down>
  xmap [1;5B <C-Down>
  " vim complains if we try set <M-Left/Right/Up/Down> = ...
  nmap [1;3A <M-Up>
  imap [1;3A <M-Up>
  xmap [1;3A <M-Up>
  nmap [1;3B <M-Down>
  imap [1;3B <M-Down>
  xmap [1;3B <M-Down>
  nmap [1;3C <M-Right>
  imap [1;3C <M-Right>
  nmap [1;3D <M-Left>
  imap [1;3D <M-Left>

  nmap [1;4D <M-S-left>
  nmap [1;4C <M-S-right>
  nmap [1;4A <M-S-up>
  nmap [1;4B <M-S-down>
endif
" The alternative, if there are other inconsistencies in vim, or if other
" programs need xterm-like sequences, is to enable xterm-keys in tmux and
" try something along the lines of nmap [1;3A <M-Up>, nmap [1;3B <M-Down>,
" or maybe use tmux's terminal-overrides string option to match the set termcap
" shown in vim inside a pty.
"}}}
" Q <C-q> <C-c>: QUICK EXIT {{{
nnoremap Q :qa<CR>
nnoremap !Q :qa!<CR>
nnoremap <C-q> :qa<CR>
inoremap <C-c> <ESC>
"}}}
" UP/DOWN MAPPINGS {{{
" revert the semantic: normal <up>,<down>,j,k keys move the cursor by visual line
nnoremap j gj
nnoremap k gk
nnoremap <up> gk
nnoremap <down> gj
xnoremap <up> gk
xnoremap <down> gj
" and gj,gk move the cursor by physical line (g<up>, g<down> not mapped, for now)
nnoremap gj j
nnoremap gk k
xnoremap gj <down>
xnoremap gk <up>
"}}}
" Faster scrolling {{{
nnoremap <C-E> 4<C-E>
nnoremap <C-Y> 4<C-Y>
" }}}
" MISCELLANEOUS {{{
" go to tag location if only 1 place, or show selection if more than 1 place
nnoremap <C-]> :vertical stjump <C-r><C-w><CR>
nnoremap <leader>tc :vertical stjump <C-r>+<CR><C-w>T
" Session Save As and Open
nnoremap <leader>ssa :mksession! ~/.vim/sessions/
nnoremap <leader>so :source ~/.vim/sessions/
nnoremap <leader>ww :<C-u>pwd<cr>
nnoremap <C-g> :nohlsearch<CR>:call clearmatches()<CR><C-g>
nnoremap <leader><F5> :h grota_documentation<CR>
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
"}}}
" DIFF {{{
" Diff mode only mappings.
" Center the screen upon moving to the next diff chunk.
" I don't care what the manual says, I don't like asymmetry,
" dg/dp in normal/visual mode.
augroup grota_autocommands
  autocmd!
augroup END
augroup grota_autocommands
  autocmd FilterWritePre * if &diff|
        \ nnoremap <buffer> <leader>du :<C-U>diffupdate<CR>|
        \ nnoremap <buffer> dp dp]czz|
        \ nnoremap <buffer> dg do]czz|
        \ nnoremap <buffer> do <nop>|
        \ xnoremap <buffer> dp :diffput<CR>|
        \ xnoremap <buffer> dg :diffget<CR>|
        \ nnoremap <buffer> <leader>dw :call ToggleDiffWhitespace()<CR>|
        \ nnoremap <buffer> <M-Left> 13z<Left>|
        \ nnoremap <buffer> <M-Right> 13z<Right>|
        \ endif
  autocmd WinEnter * if &diff==0|
        \ if maparg('dp','x') !=# ''|
        \ xunmap <buffer> dp|
        \ endif|
        \ if maparg('dg','x') !=# ''|
        \ xunmap <buffer> dg|
        \ endif|
        \ if maparg('dp','n') !=# ''|
        \ nunmap <buffer> dp|
        \ endif|
        \ if maparg('dg','n') !=# ''|
        \ nunmap <buffer> dg|
        \ endif|
        \ try|
        \ nunmap <buffer> do|
        \ catch /.*/|
        \ endtry|
        \ endif
  autocmd User GrotaDiffOff if maparg('<M-Left>','n') =~ '13z'|
        \ nunmap <buffer> <M-Left>|
        \ endif|
        \ if maparg('<M-Right>','n') =~ '13z'|
        \ nunmap <buffer> <M-Right>|
        \ endif
augroup END

let g:diffwhitespaceon = 0
function! ToggleDiffWhitespace()
    if g:diffwhitespaceon
        set diffopt-=iwhite
        set diffexpr&
        let g:diffwhitespaceon = 0
    else
        set diffopt+=iwhite
        set diffexpr=CallDiffDashWonIwhite()
        let g:diffwhitespaceon = 1
    endif
    diffupdate
    redraw!
endfunc
function! CallDiffDashWonIwhite()
  let opt = ""
  if &diffopt =~ "icase"
    let opt = opt . "-i "
  endif
  if &diffopt =~ "iwhite"
    let opt = opt . "-w "
  endif
  silent execute "!diff -a --binary " . opt . v:fname_in . " " . v:fname_new . " > " . v:fname_out
endfunction

"}}}
" FOLD NAVIGATION {{{
nnoremap z<Down> zj
nnoremap z<Up> zk
"}}}
"}}}

" EASIER TEXT EDITING {{{
" gV < >: VISUAL SELECTIONS AND SHIFTING {{{
" visual shifting (does not exit Visual mode)
xnoremap < <gv
xnoremap > >gv
" Visually select the text that was last edited/pasted
nnoremap gV `[v`]
xnoremap <BS> x
"}}}
" <leader>y/yf/yo/yO/yp/p : YANKING AND PASTING {{{
xnoremap <Leader>y "+ygv"*y`>
nnoremap <Leader>yf :let @+=expand("%")<CR>:echo 'copied '.expand("%")<CR>
nnoremap <Leader>yo :let @+=expand("%:t")<CR>:echo 'copied '.expand("%:t")<CR>
nnoremap <Leader>yO :let @+=expand("%:t:r")<CR>:echo 'copied '.expand("%:t:r")<CR>
nnoremap <Leader>yp :let @+=expand("%:h")<CR>:echo 'copied '.expand("%:h")<CR>
nnoremap <Leader>p "+gp
nmap Y y$
"}}}
" <C-s> QUICK SAVING, <leader>ee -> :e {{{
nnoremap <C-s> :update<CR>
inoremap <C-s> <C-o>:update<CR>
nnoremap <Leader>ee :e<cr>
nnoremap <Leader>oc :tabe <C-r>+<CR>
"}}}
" nix_<M-UP/DOWN> MOVE LINES UP/DOWN {{{
nnoremap <M-Down> :m+<CR>==
nnoremap <M-Up> :m-2<CR>==
inoremap <M-Down> <Esc>:m+<CR>==gi
inoremap <M-Up> <Esc>:m-2<CR>==gi
xnoremap <M-Down> :m'>+<CR>gv=gv
xnoremap <M-Up> :m-2<CR>gv=gv
"}}}
" <CR> SPLIT LINE {{{
nnoremap <CR> i<cr><esc>
imap <expr> <CR> pumvisible() ? "\<C-y>\<CR>" : "\<CR>"
"}}}
" i_<M-w,d> i_<C-w,d> i_<C-y> i_<C--> {{{
inoremap <M-w> <C-o>dW
inoremap <M-d> <C-o>dw
inoremap <C-w> <C-o>dB
inoremap <C-d> <C-o>db
inoremap <C-_> <C-y>
inoremap <C-b> <BS>
"}}}
" v_r Replace {{{
function! s:replace()
  if visualmode() ==# 'V'
    if line("'>") == line('$')
      normal! gv"_dp
    else
      normal! gv"_dP
    endif
  else
    if col("'>") == col('$') - 1
      normal! gv"_dp
    else
      normal! gv"_dP
    endif
  endif
endfunction
xnoremap R r
xnoremap r :<C-U>call <SID>replace()<cr>
" }}}
" Text Objects: il (inner line) {{{
xnoremap <silent> il <Esc>^vg_
onoremap <silent> il :<C-U>normal! ^vg_<CR>
" }}}
" Text Objects: i# (inner comment) {{{
function! s:inner_comment(vis)
  if synIDattr(synID(line('.'), col('.'), 0), 'name') !~? 'comment'
    call s:textobj_cancel()
    if a:vis
      normal! gv
    endif
    return
  endif

  let origin = line('.')
  let lines = []
  for dir in [-1, 1]
    let line = origin
    let line += dir
    while line >= 1 && line <= line('$')
      execute 'normal!' line.'G^'
      if synIDattr(synID(line('.'), col('.'), 0), 'name') !~? 'comment'
        break
      endif
      let line += dir
    endwhile
    let line -= dir
    call add(lines, line)
  endfor

  execute 'normal!' lines[0].'GV'.lines[1].'G'
endfunction
xmap <silent> i# :<C-U>call <SID>inner_comment(1)<CR><Plug>(TOC)
omap <silent> i# :<C-U>call <SID>inner_comment(0)<CR><Plug>(TOC)

function! s:textobj_cancel()
  if v:operator == 'c'
    augroup textobj_undo_empty_change
      autocmd InsertLeave <buffer> execute 'normal! u'
            \| execute 'autocmd! textobj_undo_empty_change'
            \| execute 'augroup! textobj_undo_empty_change'
    augroup END
  endif
endfunction
noremap         <Plug>(TOC) <nop>
inoremap <expr> <Plug>(TOC) exists('#textobj_undo_empty_change')?"\<esc>":''
" }}}
" Text Objects: indent: ii (inner) ai (around) oi (only) {{{
function! s:indent_len(str)
  return type(a:str) == 1 ? len(matchstr(a:str, '^\s*')) : 0
endfunction

function! s:indent_object(op, skip_blank, b, e, bd, ed)
  let i = min([s:indent_len(getline(a:b)), s:indent_len(getline(a:e))])
  let x = line('$')
  let d = [a:b, a:e]

  if i == 0 && empty(getline(a:b)) && empty(getline(a:e))
    let [b, e] = [a:b, a:e]
    while b > 0 && e <= line('$')
      let b -= 1
      let e += 1
      let i = min(filter(map([b, e], 's:indent_len(getline(v:val))'), 'v:val != 0'))
      if i > 0
        break
      endif
    endwhile
  endif

  for triple in [[0, 'd[o] > 1', -1], [1, 'd[o] < x', +1]]
    let [o, ev, df] = triple

    while eval(ev)
      let line = getline(d[o] + df)
      let idt = s:indent_len(line)

      if eval('idt '.a:op.' i') && (a:skip_blank || !empty(line)) || (a:skip_blank && empty(line))
        let d[o] += df
      else | break | end
    endwhile
  endfor
  execute printf('normal! %dGV%dG', max([1, d[0] + a:bd]), min([x, d[1] + a:ed]))
endfunction
xnoremap <silent> ii :<c-u>call <SID>indent_object('>=', 1, line("'<"), line("'>"), 0, 0)<cr>
onoremap <silent> ii :<c-u>call <SID>indent_object('>=', 1, line('.'), line('.'), 0, 0)<cr>
xnoremap <silent> ai :<c-u>call <SID>indent_object('>=', 1, line("'<"), line("'>"), -1, 1)<cr>
onoremap <silent> ai :<c-u>call <SID>indent_object('>=', 1, line('.'), line('.'), -1, 1)<cr>
xnoremap <silent> oi :<c-u>call <SID>indent_object('==', 0, line("'<"), line("'>"), 0, 0)<cr>
onoremap <silent> oi :<c-u>call <SID>indent_object('==', 0, line('.'), line('.'), 0, 0)<cr>
" }}}
"}}}
"}}}

" CORE FTPLUGIN/SYNTAX SETTINGS {{{
" See $VIMRUNTIME/{syntax,ftplugin}/* for more details
let g:vimsyn_folding = 'af'
let g:is_bash = 1
let g:sh_fold_enabled=7
" This is disabled because it's slow.
" use K on a proposed line in an interactive gitrebase to see the corresponding diff
augroup grota_autocommands
  autocmd FileType gitrebase nnoremap <buffer> <silent> S :Cycle<CR>
  autocmd FileType gitcommit nnoremap <buffer> <silent> <leader>d :DiffGitCached<CR>:wincmd L<CR>
augroup END
" }}}

" CONTRIB PLUGINS MAPPINGS AND SETTINGS {{{
" phpactor {{{
" see vim/dotvim/ftplugin/php.vim
" }}}
" vim-cycle {{{
augroup grota_autocommands
  autocmd FileType php call AddCycleGroup('php', ['TRUE', 'FALSE', 'false', 'true'])
augroup END
" }}}
" tagbar plugin {{{
nnoremap <silent> <leader>tb :TagbarToggle<CR>
let g:tagbar_autofocus = 1
nnoremap <silent> <leader>fs :TagbarCurrentTag 'p'<CR>
"}}}
" Gutentags {{{
let g:gutentags_ctags_tagfile = './.git/tags'
" Use same options as git hooks
let g:gutentags_ctags_extra_args = ['--options=' . $DOTFILESREPO . '/chezmoi_ignored/ctags/relative_format.ctags']
" }}}
" Fugitive {{{
augroup grota_autocommands
  autocmd BufEnter fugitive://**//[0-3]/** let b:autotagDisabled=1
augroup END
nnoremap <M-d> :Gdiff<CR>gg]czz
nnoremap <leader>gw  :Gw<CR>
nnoremap <leader>gb  :Git blame<CR>
nnoremap <leader>gef  :Gedit<CR>
nnoremap <leader>gec  :Gedit @^{}<CR>
nnoremap <leader>gtel  :Gtabedit <C-r>+<CR>
nnoremap <leader>gtec  :Gtabedit @^{}<CR>
nnoremap <M-s> :Git<CR>
"}}}
" Surround {{{
augroup grota_autocommands
  autocmd FileType php let b:surround_{char2nr("r")} = "['\r']"
  autocmd FileType php let b:surround_{char2nr("l")} = "->\r"
augroup END
let g:surround_{char2nr("8")} = "*\r*"
"}}}
" vinegar {{{
nmap - <Plug>VinegarVerticalSplitUp
"}}}
" fzf.vim {{{
let g:fzf_command_prefix = 'FZF'
nnoremap <C-\> :GrotaWipeEmptyBuffers<CR>:FZFBuffers<CR>
nnoremap <M-Bslash> :FZFWindows<CR>
nnoremap <F7> :GrotaWipeEmptyBuffers<CR>:GrotaInvokeFZFForBufDelete<CR>
nnoremap <leader>ff :FZFFiles<CR>
let $FZF_DEFAULT_COMMAND='(fd --no-ignore-vcs --type f --hidden --follow --exclude .git --exclude Tests/) 2> /dev/null'
""}}}
" pbogut/fzf-mru.vim {{{
nnoremap <C-f> :FZFMru<CR>
let g:fzf_mru_relative = 1
let g:fzf_mru_exclude = '^/tmp'
nnoremap <F6> :let g:fzf_mru_relative = !g:fzf_mru_relative<CR>:echo 'fzf mru is ' . (g:fzf_mru_relative ? 'ONLY_RELATIVE' : 'ALL_FILES')<CR>
" }}}
" dense-analysis/ale {{{
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_enter = 0
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 1
let g:ale_disable_lsp = 1
nnoremap <leader>st :ALEToggle<CR>
"}}}
" vim-airline {{{
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#tabline#show_tab_type = 0
let g:airline#extensions#tabline#show_splits = 0
let g:airline#extensions#tabline#show_close_button = 0
let g:airline#extensions#tabline#fnamecollapse = 0
let g:airline#extensions#tabline#tabtitle_formatter = 'TabTitleFormatterPreferCurrentBuffer'
function TabTitleFormatterPreferCurrentBuffer(n)
  let buflist = tabpagebuflist(a:n)
  let winnr = tabpagewinnr(a:n)
  let bufnr = buflist[winnr - 1]
  let all_buffers = airline#extensions#tabline#buflist#list()
  if index(all_buffers, bufnr) != -1
    return airline#extensions#tabline#get_buffer_name(bufnr)
  endif
  let curbuf = filter(buflist, 'index(all_buffers, v:val) != -1')
  if len(curbuf) ==  0
    call add(curbuf, tabpagebuflist()[0])
  endif
  return airline#extensions#tabline#get_buffer_name(curbuf[0], curbuf)
endfunction

let g:airline_powerline_fonts = 1
let g:airline#extensions#hunks#enabled = 0
let g:airline_theme= 'powerlineish'
let g:airline_theme_patch_func = 'AirlineThemePatch'
function! AirlineThemePatch(palette)
  " foreground (text)
  let a:palette['normal']['airline_a'][0] = '#9e9e9e'
  " background (green)
  let a:palette['normal']['airline_a'][1] = '#005f00'
  " foreground (text)
  let a:palette['normal']['airline_a'][2] = 247
  " background (green)
  let a:palette['normal']['airline_a'][3] = 22
  let a:palette['normal']['airline_z'][0] = '#9e9e9e'
  let a:palette['normal']['airline_z'][1] = '#005f00'
  let a:palette['normal']['airline_z'][2] = 247
  let a:palette['normal']['airline_z'][3] = 22
endfunction
" }}}
" vim-yankstack {{{
" sneak, as a scriptname, could stay before or after yankstack, it does not
" matter: sneak is polite (does not map if a map already exists) and yankstack
" is not (always maps) so if it stays before its mappings get overwritten and
" if it stays after it does not overwrite.
" So take s/S off of this var of yankstack below since they are used by
" sneak+surround (normal+visual).
" Remove also Y from the list since I want to remap it to y$ anyway
" (I can avoid explicitly `call yankstack#setup()`)
let g:yankstack_yank_keys = ['c', 'C', 'd', 'D', 'x', 'X', 'y']
" }}}
" autopairs {{{
let g:AutoPairsShortcutJump='<M-o>'
let g:AutoPairsMapBS = 0
let g:AutoPairsMapCR = 0
let g:AutoPairsMapSpace = 0
" <M-p> reserved for yankstack
let g:AutoPairsShortcutToggle = ''
"}}}
" Vdebug {{{
let g:vdebug_keymap = {
\    "run" : "<F8>",
\    "set_breakpoint" : "<leader><F10>",
\    "run_to_cursor" : "<leader><F1>",
\    "step_over" : "<F6>",
\    "step_into" : "<F7>",
\    "step_out" : "<leader><F4>",
\    "close" : "<leader><F6>",
\    "detach" : "<leader><F7>",
\    "get_context" : "<leader><F8>",
\    "eval_under_cursor" : "<leader><F12>",
\    "eval_visual" : "<Leader>E",
\}

" port must match the parameter in /etc/php5/conf.d/20-xdebug.ini
" There is a bug in vdebug for which if path_maps is set here
" it won't get considered in a project-local vimrc.
"   let g:vdebug_options = {
"   \    'port' : 9000,
"   \    'timeout' : 20,
"   \    'server' : '',
"   \    'on_close' : 'stop',
"   \    'break_on_open' : 1,
"   \    'ide_key' : '',
"   \    'debug_window_level' : 0,
"   \    'debug_file_level' : 0,
"   \    'debug_file' : '',
"   \    'path_maps' : {"/path/inside/docker": "/path/in/host"},
"   \    'watch_window_style' : 'expanded',
"   \    'marker_default' : '‚¨¶',
"   \    'marker_closed_tree' : '‚ñ∏',
"   \    'marker_open_tree' : '‚ñæ',
"   \    'sign_breakpoint' : '‚ñ∑',
"   \    'sign_current' : '‚ñ∂',
"   \    'continuous_mode'  : 1,
"   \    'simplified_status': 1,
"   \    'layout': 'vertical',
"   \}
nnoremap <Leader>br :BreakpointRemove *<CR>
" }}}
" vim-sneak {{{
let g:sneak#use_ic_scs = 1
let g:sneak#label = 1
nmap ; <Plug>SneakPrevious
omap ; <Plug>SneakPrevious
xmap ; <Plug>SneakPrevious
nmap ' <Plug>SneakNext
omap ' <Plug>SneakNext
xmap ' <Plug>SneakNext
"replace 'f' with inclusive 1-char Sneak
nmap f <Plug>Sneak_f
nmap F <Plug>Sneak_F
xmap f <Plug>Sneak_f
xmap F <Plug>Sneak_F
omap f <Plug>Sneak_f
omap F <Plug>Sneak_F
"replace 't' with exclusive 1-char Sneak
nmap t <Plug>Sneak_t
nmap T <Plug>Sneak_T
xmap t <Plug>Sneak_t
xmap T <Plug>Sneak_T
omap t <Plug>Sneak_t
omap T <Plug>Sneak_T
" }}}
" vim-easy-align {{{
vmap <leader>a <Plug>(EasyAlign)
nmap <leader>a <Plug>(EasyAlign)
" }}}
" airblade gitgutter {{{
let g:gitgutter_eager = 0
let g:gitgutter_escape_grep = 1
let g:gitgutter_realtime = 0
" }}}
" mbbill/undotree {{{
nnoremap <leader>tu :UndotreeToggle<CR>
" }}}
" gfanto/fzf-lsp.nvim {{{
nnoremap <leader>fws :FZFWorkspaceSymbols <C-r><C-w><CR>
nnoremap <leader>fr :FZFReferences<CR>
" }}}
" mhinz/vim-grepper {{{
let g:grepper = {}
" search uses loclist, ale uses quickfix.
let g:grepper.quickfix = 0
let g:grepper.searchreg = 0
"let g:grepper.prompt_mapping_tool = '<leader>gg'
let g:grepper.tools = ['git', 'ag']
nnoremap <leader>gg :Grepper -cword<CR>
" }}}
" haya14busa/vim-asterisk {{{
let g:asterisk#keeppos = 1
nmap *  <Plug>(asterisk-z*)
nmap #  <Plug>(asterisk-z#)
nmap g* <Plug>(asterisk-gz*)
nmap g# <Plug>(asterisk-gz#)
xmap *  <Plug>(asterisk-z*)
xmap #  <Plug>(asterisk-z#)
xmap g* <Plug>(asterisk-gz*)
xmap g# <Plug>(asterisk-gz#)
" }}}
" christoomey/vim-tmux-navigator {{{
let g:tmux_navigator_no_mappings = 1
nnoremap <silent> <M-S-left> :TmuxNavigateLeft<cr>
nnoremap <silent> <M-S-down> :TmuxNavigateDown<cr>
nnoremap <silent> <M-S-up> :TmuxNavigateUp<cr>
nnoremap <silent> <M-S-right> :TmuxNavigateRight<cr>
nnoremap <silent> <M-\|> :TmuxNavigatePrevious<cr>
" }}}
"}}}

" CUSTOM PLUGINS MAPPINGS AND SETTINGS {{{
" <leader>q/<leader>l quickfix/location list toggle {{{
nnoremap <silent> <leader>q :QFToggle<CR>
nnoremap <silent> <leader>l :LLToggle<CR>
"}}}
" <leader>xs for syntax class {{{
function! SynStack()
  if !exists("*synstack")
    return
  endif
  echo join(map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")'), " > ")
endfunc
nnoremap <silent> <leader>xs :call SynStack()<CR>
"}}}
"}}}

" AUTOCOMMANDS {{{
augroup grota_autocommands
  " Red line for gitcommit
  autocmd FileType gitcommit setlocal colorcolumn=+1
  " Quickfix window: no numbers
  autocmd Filetype qf setlocal nonumber
  " restore default functionality.
  autocmd BufReadPost quickfix nnoremap <buffer> <CR> <CR>
augroup END
" this matches the conflict markers
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'
"}}}

" ABBREVIATIONS {{{
" }}}

" NOTES {{{
" Mappable Keys {{{
" ` (currently default but we use \)
" <M-e>
" i_<C-z,b,f> can be remapped
" <F6,7,8> can be mapped
" }}}
" }}}

silent! so .local.vimrc
