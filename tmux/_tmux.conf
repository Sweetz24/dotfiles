# vim: set tabstop=2 shiftwidth=2 foldmethod=marker:

# TMUX DEFAULTS {{{

# vi-copy mappings
# C-d C-u : f F t T HLM C-f C-b C-e C-y
# C-Up C-Down

# emacs-edit mappings
# C-d (delete) C-k (delete till-EOL)
# C-a C-e
# C-w C-y
# M-b M-f

# { swap-pane -U
# } swap-pane -D
# space next-layout
# q display-panes
# , rename-window
# . move-window

# }}}

# initialization {{{
set-option -g @copycat_search_C-c 'refs #[[:digit:]]+: E[EG]-[[:digit:]]+ - .*'
bind -n M-/ run-shell $DOTFILESREPO/tmux/plugins/tmux-copycat/scripts/copycat_search.sh
run-shell ~/.tmux/plugins/tmux-copycat/copycat.tmux
run-shell ~/.tmux/plugins/tmux-yank/yank.tmux
# Default is 'o' but I need it in copy-mode
set-option -g @open "C-o"
set-option -g @open-editor "Enter"
run-shell ~/.tmux/plugins/tmux-open/open.tmux
set-option -g prefix C-a
set-option -g default-terminal "screen-256color"
set-option -g status-utf8 on
set-option -g set-titles on
set-option -g set-titles-string '[#I] #W | #T'
set-option -g set-clipboard off
setw -g window-status-current-format '«#I: #W#F»'
setw -g window-status-format ' #I: #W '
setw -g automatic-rename on
setw -g window-status-attr bold
# time after which the -r (repeat) in bind -r expires. keep it short.
set-option -g repeat-time 300
setw -g monitor-activity on
# don't bug me with a message
set-option -g visual-activity off
# like 'timeout' for vim. Just the default.
set-option -sg escape-time 50
set-option -g mode-keys vi
set-option -g history-limit 10000
set-option -g display-time 6000
# windows/panes start with 1
set-option -g base-index 1
setw -g pane-base-index 1
# C-a C-a sends a normal C-a through
unbind C-b
bind C-a send-prefix
# status
set-option -g status-justify centre
set-option -g status-left-length 40
set-option -g status-right "%H:%M %d-%b-%y"
set-option -g status-left ""
# required to source ~/.bashrc and such
set-option -g default-command "/bin/bash"
setw -g xterm-keys on
#terminal-overrides ""
set-option -g status-position top
set-option -g renumber-windows on
# }}}

# emacs-edit mappings {{{
# use emacs mode on tmux commandline
set-option -g status-keys emacs
bind -t emacs-edit C-Left previous-word
bind -t emacs-edit C-Right next-word-end
# }}}

# vi-copy mappings {{{
bind -t vi-copy 'v' begin-selection
bind -t vi-copy "'" jump-again
unbind -t vi-copy '\;'
bind -t vi-copy '\;' jump-reverse
bind -t vi-copy "M-'" end-of-line
bind -t vi-copy "M-\\;" back-to-indentation
bind -t vi-copy "Home" start-of-line
bind -t vi-copy "End" end-of-line
bind -t vi-copy C-h previous-space
#bind -t vi-copy C-j cursor-down
bind -t vi-copy C-k cursor-up
bind -t vi-copy C-l next-space-end
bind -t vi-copy [ page-up
bind -t vi-copy ] page-down
# }}}

# normal mode bindings {{{
bind p paste-buffer
bind [ copy-mode -e
bind c new-window -c '#{pane_current_path}'
# }}}

# r, C-o, easy tmux devel mode {{{
bind r source-file ~/.tmux.conf \; display "Reloaded!"
bind C-x list-keys -t vi-copy
bind C-o show-options -g
# }}}

# window/pane mappings {{{
unbind %
unbind '"'
unbind "'"
unbind l
bind | split-window -h -c '#{pane_current_path}'
bind \ split-window -h -c '#{pane_current_path}'
bind v split-window -h -c '#{pane_current_path}'
bind - split-window -v -c '#{pane_current_path}'
bind -r H resize-pane -L 15
bind -r J resize-pane -D 15
bind -r K resize-pane -U 15
bind -r L resize-pane -R 15
unbind \;
bind -n M-f last-window
unbind s
bind S choose-session
# first bound tmux command must be 'run' because otherwise the command substitution $(...) does not work
# The last '%%' is not \"%%\" because full commandline might contain bash reserved works (inline scripts)
# I have to go through this tr+grep thing because -F #{pane_id} returns the same pane_id twice for a 2-pane win, probably a bug in tmux.
bind j run "tmux new-window -n join-pane $DOTFILESREPO/bin/tmux-utils join-selected-pane #D $(tmux list-panes | tr '\n' ' ' | grep -o '%[0-9]\\+ ') "
bind s run "tmux new-window -n send-pane $DOTFILESREPO/bin/tmux-utils send-selected-pane #D $(tmux list-panes | tr '\n' ' ' | grep -o '%[0-9]\\+ ') "
bind -n C-Space next-window
bind -r C-n next-window
bind -r C-p previous-window
bind -n C-NPage next-window
bind -n C-PPage previous-window
bind i choose-window "swap-window -t '%%'"
# let's comment this out for a while to force me to stay on the homerow
#bind -n M-PPage copy-mode -u
bind -n M-[ copy-mode -e
# }}}

# pane mappings {{{
unbind o
bind o break-pane
bind -r C-h select-pane -L
bind -r C-j select-pane -D
bind -r C-k select-pane -U
bind -r C-l select-pane -R
bind -n M-Space select-pane -t :.+
bind -n M-q resize-pane -Z
# Since we have alt+space these are not really needed anymore
#bind -r h select-pane -L
#bind -r j select-pane -D
#bind -r k select-pane -U
#bind -r l select-pane -R
#bind Tab select-pane -t :.+
#bind BTab select-pane -t :.-
#bind "'" last-pane
# }}}

# mouse {{{
#set-option -g mouse on
#bind -T root WheelUpPane   if -Ft= '#{mouse_any_flag}' 'send-keys -M' 'if -Ft= "#{pane_in_mode}" "send-keys -M" "copy-mode -e"'
#unbind -T root MouseDrag1Pane
#unbind -T root MouseDown1Pane
#unbind -T root MouseDown3Pane
#unbind -T root MouseDown1Status
#unbind -T root MouseDrag1Border
#unbind -t vi-copy MouseDrag1Pane
#bind -t vi-copy WheelUpPane   halfpage-up
#bind -t vi-copy WheelDownPane halfpage-down
#bind -T root MouseDown1Pane send-keys -M
#bind -T root MouseDrag1Pane send-keys -M
# }}}

# colors {{{
# status bar (51=light blue 233=very dark grey)
set-option -g status-fg colour51
set-option -g status-bg colour233
# windows listing in the status bar
setw -g window-status-fg cyan
setw -g window-status-bg default
setw -g window-status-attr dim
setw -g window-status-current-fg white
setw -g window-status-current-bg colour18
setw -g window-status-current-attr bright
set-option -g window-status-activity-fg cyan
set-option -g window-status-activity-bg colour235
set-option -g window-status-activity-attr dim
# highlighting of pane borders
set-option -g pane-active-border-fg white
set-option -g pane-active-border-bg colour17
set-option -g pane-border-fg white
# messages
set-option -g message-bg colour135
# }}}
