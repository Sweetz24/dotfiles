*grota_documentation.txt*	Doc for my custom VIM distribution

==============================================================================
This file describes the mappings in .vimrc                 *grota_documentation*
==============================================================================

      TO LEARN
i_CTRL-f     Same as == but from insert mode
o_i#        inner comment
o_[iao]i    inner/around/only indent
<leader>I/A Prepend/Append to all adjacent lines with same indentation
<leader>bd delete buffer without save confirmation

cx<movement like w,i'> followed by . or by another cx<movement>
(a)round/(i)nner  (n)ext/(l)ast  b()/B{}/r[]
(a)round/(i)nner  (v)ariable (php, js, ruby)
(a)round/(i)nner  (f) x (mnemonic: "font" x)
(a)round/(i)nner  (r)   (mnemonic: "ruby block")
blockwise visual mode works well to enclose each line in quotes.
repeat last commandline command: @:
i_<C-G>s     tpope's surround in insert mode. Accepts <CR> after s.
(also, look out for new possible surroundings like <?php, html or erb
that you may want, surround is flexible)
i/n_<M-o>    Autopair Jump
(s)eek/(S)eek xx
s search forward, S backwards
s<enter>
<leader>sm   Space map/unmap

g/           IndexedSearch: shows at which match index you are
i_CTRL-u     Delete till start of line

      CTRLP
  <C-z>, <C-o> Mark, Open multi files
  <C-a>, <C-e> start,end
  <C-u>, <C-w> clear all, clear word
  <C-t>, <C-v>, <C-s> open in tab, vert, horz

      VARIOUS
<leader>gl :<C-U>Gitv --all<CR>
{dcv}    {ia}{,} delete-change-visual inner-around argument
|surround|   ysiw'  add '' around the word
|surround|   cs)(   change only the spacing, since the opening braces {[( do have spacing

* |surround| cs'"  change quote type (another example: cs>")
* |surround| vS>   in char visual aggiunge <> al testo selezionato. (altro esempio: vSt aggiunge tag)
* |surround| yss"  wrappa la linea con ""
* |surround| ySS}  wrappa la linea con {}. La linea e' su newline indentata. Ma a sto punto usa line visual con S{
* |surround| in block visual: gS{ o S{ wrappano il testo con {}.
|surround| in char  visual: gS{ wrappa il testo con {}. Il testo e' su newline indentato
|surround| in char  visual:  S{ wrappa il testo con {}.
|surround| in line  visual: gS{ wrappa il testo con {}. Il testo e' su newline
|surround| in line  visual:  S{ wrappa il testo con {}. Il testo e' su newline indenteato

:Linediff (twice, from visual mode). :LinediffReset
i_ <C-l> <C-h> <C-j> <C-k> wordwise movement
<C-n> <C-p> :bn :bp
<M-up><M-down>  move line(s) up/down in normal,insert,visual mode
|yankring| <M-.> <M-,> Yankring next/prev
|NERDComFunctionalitySummary| ,cc ,ci ...
|fugitive|
  <M-d>       :Gdiff
  <leader>gs  :Gstatus

usually overridden by ftplugins: |[[| |]]| ( |[m| |]m| |[M| |]M| )


      LEARNED (reminder)

<leader>P   linewise paste
v_r         visual mode replace (with unnamed register)
o_il        inner line
<leader>q <leader>l
<leader>gg <leader>gq
<leader>fs   current tag
<leader>ww :pwd
|surround| ds)   delete the surrounding ()
<C-g> clear the search highlight followed by <C-g>
<M-d>  :Gdiff <M-s>  :Gstatus
<leader>gw  :Gwrite

      CTRLP
<C-\> Open dialog
<C-n> <C-p> next/prev in ctrlp history
<C-r> ToggleRegex
<C-d> ToggleByFname
<C-x> Delete Buffer

vim:tw=78:ts=8:ft=help:norl:
