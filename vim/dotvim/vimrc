" vim:ft=vim:foldmethod=marker:foldcolumn=3:foldlevel=0
" Mappable Keys {{{
" ` (currently default but we use \)
" <M-e>
" }}}

" INITIALIZATION "{{{
set nocompatible
runtime macros/matchit.vim
runtime bundle/tpope_vim-pathogen/autoload/pathogen.vim
call pathogen#infect()
call pathogen#helptags()
filetype plugin indent on
if has("gui_running")
  " a nice coloscheme easy to the eye, it sets the 'background' option
  colorscheme koehler
  " Hide the Toolbar
  set guioptions-=T
  " Don't load $VIMRUNTIME/menu.vim
  set guioptions+=M
  " Hide the Menu
  set guioptions-=m
  set guiheadroom=0
  " Set gui font
  set guifont=Monospace\ 10
else
  set background=dark
endif
colorscheme grota
syntax enable
"}}}

" Meta mappings {{{
" Automatic mapping of <M-> keys. I think there's room to explore
" <M-S-> mapping using toupper see http://vim.wikia.com/wiki/VimTip738
let s:c='a'
while s:c <= 'z'
  exec "set <M-".(s:c).">=\e".s:c
  exec "imap \e".s:c." <M-".(s:c).">"
  let s:c = nr2char(1+char2nr(s:c))
endwhile
let s:c='0'
while s:c <= '9'
  exec "set <M-".(s:c).">=\e".s:c
  exec "imap \e".s:c." <M-".(s:c).">"
  let s:c = nr2char(1+char2nr(s:c))
endwhile
set <M-/>=/
set <M-'>='
set <M-;>=;
set <M-->=-
set <M-=>==
set <M-`>=`
set <M-!>=!
set <M-~>=~
"}}}

" VIM OPTIONS {{{
let mapleader = "\<Space>"
set scrolloff=1 "keep 1 line above and below the cursor
"set mouse=a " let's try using the mouse for a while
set ignorecase " ignore case if search pattern is all lowercase, case-sensitive otherwise
set smartcase
set showcmd " show partial command on last line
set autoindent
set smartindent " extends indent functionalites of autoindent. works well for C-like sources
set expandtab " expandtab to spaces
set shiftwidth=2 " shiftwidth: Number of spaces to use for each step of (auto)indent.
set tabstop=2 " tabstop: Number of spaces that a <Tab> in the file counts for.
set shiftround " use multiple of shiftwidth when indenting with '<' and '>'
set hls " highlist searches (set hlsearch). Use :noh[lsearch] to disable temporarily
set list " show the listchars in vim
set listchars=tab:‚ñ∏\ ,trail:¬∑,extends:‚ùØ,nbsp:¬∑,precedes:‚ùÆ
set showbreak=‚Ü™
set history=400
set backspace=indent,eol,start
set hidden " simply hide a modified buffer when switching to another.
set gdefault " search/replace globally (on a line) by default
set pastetoggle=<F9>
set sidescrolloff=37 "keep N chars at the left and right of the cursor, see also sidescroll below
set sidescroll=12 "When vim needs to scroll horizontally do it smoothly by moving 12 chars. 1 is not enough
set cursorline " the line the cursor is on is underlined
set wildmenu
set wildmode=longest,full
set wildignore+=.hg,.git,.svn   " Version control
set dir-=. " remove current dir as a possibility of where to save the swap file
set nobackup " default is already off, but just to be sure.
"set splitbelow " horizontal split below as default
set splitright " vertical split on the right as default
set whichwrap=b,s,<,>,[,] "left and right, in insert e normal mode wrap lines
set ruler
set laststatus=2 " when to show the extra status line: 2=always, 1=only if there are at least two windows
set keymodel=startsel
" This will look in the directory of the current file for 'tags', and work up the tree towards root until one is found.
set tags=./tags;
set completeopt=longest,menuone,preview
set virtualedit+=block,onemore
set clipboard=autoselect,exclude:cons\|linux
" don't use the tag file for i_<C-N> and i_<C-P>
" for php, omnicomplete in autoload/phpcomplete.vim already does that
set complete-=t
" and no included files either
set complete-=i
" choose what to save in the session files.
" disable the useless ones and
" the ones that we already load from the .vimrc
set sessionoptions-=options
set sessionoptions-=help
set sessionoptions-=blank
" fold are dynamically created, we also expand all folds
" upon BufReadPost *.php, see after/plugin/after_actions.vim
set sessionoptions-=folds
set foldmethod=syntax
" defaults is no folds closed
set foldlevelstart=99
" used for knowing when to save to the swap file and for the CursorHold event
set updatetime=500
set encoding=utf-8
" doesn't really work on terminal vim
if has("balloon_eval") && has("gui_running")
  set ballooneval
endif
set showtabline=2
set tabline=%!GrotaTabLine()
set fillchars-=vert:\|
" Don't consider 007 as octal for <C-a> <C-x> purposes
set nrformats-=octal
" Insert only one space when joining lines that contain sentence-terminating
" punctuation like `.`.
set nojoinspaces
"}}}

" VIM PLAIN MAPPINGS {{{
" EASIER NAVIGATION {{{
" VERY OPINIONATED REMAPPINGS {{{
nnoremap <leader><space> :
xnoremap <leader><space> :
nnoremap \ `
nnoremap <M-'> g_l
xnoremap <M-'> g_l
nnoremap <M-;> ^
xnoremap <M-;> ^
inoremap <M-'> <C-o>$
inoremap <M-Right> <C-o>$
inoremap <M-;> <C-o>^
inoremap <M-Left> <C-o>^
inoremap jj <Esc>
"}}}
" USE <M-LEFT/RIGHT> TO Navigate Tabs {{{
nnoremap <silent> <M-Left> :<C-u>tabprevious<CR>
nnoremap <silent> <M-Right> :<C-u>tabnext<CR>
" }}}
" USE nix_<M-HJKL> TO MOVE IN FINER STEPS {{{
inoremap <M-k> <C-o>gk
inoremap <M-j> <C-o>gj
inoremap <M-h> <left>
inoremap <M-l> <right>
nnoremap <M-k> gk
nnoremap <M-j> gj
nnoremap <M-h> <left>
nnoremap <M-l> <right>
xnoremap <M-k> gk
xnoremap <M-j> gj
xnoremap <M-h> <left>
xnoremap <M-l> <right>
"}}}
" USE nix_<C-HJKL> TO MOVE BETWEEN WORDS {{{
inoremap <C-l> <C-o>E<Right>
inoremap <C-h> <C-o>B
inoremap <C-j> <C-o>gj
inoremap <C-k> <C-o>gk
nnoremap <C-l> E<Right>
nnoremap <C-h> B
nnoremap <C-j> 3gj
nnoremap <C-k> 3gk
xnoremap <C-l> E<Right>
xnoremap <C-h> B
xnoremap <C-j> 3gj
xnoremap <C-k> 3gk
" }}}
" <C-Up/Down/Left/Right>: EASY WINDOW RESIZING {{{
nnoremap <silent> <C-Left>  3<C-W><
nnoremap <silent> <C-Down>  3<C-W>-
nnoremap <silent> <C-Up>    3<C-W>+
nnoremap <silent> <C-Right> 3<C-W>>
"}}}
" <C-W>{} WINDOW SWAPPING {{{
nnoremap <C-w>{ <C-w>R
nnoremap <C-w>} <C-w>r
nnoremap <C-w><C-d> :bd<CR>
" }}}
" WINDOWS SPLIT/MAXIMIZE/CLOSE/ONLY/CYCLE {{{
" cycle through windows
nnoremap <tab> <C-W>w
nnoremap <S-tab> <C-W>W
" Close/Only window
nnoremap <F1> <C-W>o:diffoff<CR>:doautocmd User GrotaDiffOff<CR>
inoremap <F1> <Nop>
nnoremap <F2> <C-W>c
" Go to the alternate file in a split window
nnoremap <C-^> :vertical split #<CR>
"}}}
" TABS OPEN/CLOSE/NAVIGATE {{{
nnoremap <F3> <C-W>T
nnoremap <F4> :<C-u>tabclose<CR>
nnoremap <F5> :<C-u>tabedit<CR>
"nnoremap <silent> <M-`> :<C-u>tabprevious<CR>
"inoremap <silent> <M-`> <Esc>:<C-u>tabprevious<CR>
nnoremap <silent> <M-1> :<C-u>tabprevious<CR>
inoremap <silent> <M-1> <Esc>:<C-u>tabprevious<CR>
nnoremap <silent> <M-2> :<C-u>tabnext<CR>
inoremap <silent> <M-2> <Esc>:<C-u>tabnext<CR>
nnoremap <silent> <M-~> :<C-u>tabmove -1<CR>
inoremap <silent> <M-~> <Esc>:<C-u>tabmove -1<CR>
nnoremap <silent> <M-!> :<C-u>tabmove +1<CR>
inoremap <silent> <M-!> <Esc>:<C-u>tabmove +1<CR>
" }}}
" <C-n><C-p>: NEXT/PREV BUFFER {{{
" <C-N> was the same as <Down> and I didn't need it.
nnoremap <silent> <C-n> :bn<CR>
nnoremap <silent> <C-p> :bp<CR>
"}}}
" <C-Up/Down/Left/Right><M-Up/Down/Left/Right> FOR TMUX {{{
if $TMUX !=# ''

  " TMUX with xterm-key OFF
  "udlr OA OB OD OC
  "C-udlr [A [B [D [C
  "M-udlr <up> <down> <left> <right>
  "S-udlr N/A

  " enable C-left/right with tmux's xterm-key off
  " vim complains if we try set <C-Up/Down> = ...
  "set <C-Right>=[C
  "set <C-Left>=[D
  "nmap [A <C-Up>
  "imap [A <C-Up>
  "xmap [A <C-Up>
  "nmap [B <C-Down>
  "imap [B <C-Down>
  "xmap [B <C-Down>
  " vim complains if we try set <M-Left/Right/Up/Down> = ...
  " for dragging up/down lines
  "nmap <Down> <M-Down>
  "imap <Down> <M-Down>
  "xmap <Down> <M-Down>
  "nmap <Up> <M-Up>
  "imap <Up> <M-Up>
  "xmap <Up> <M-Up>
  " for diff horizontal scrolling and moving to start/end of line
  "nmap <Left> <M-Left>
  "imap <Left> <M-Left>
  "nmap <Right> <M-Right>
  "imap <Right> <M-Right>
  "-----------------------
  " TMUX with xterm-key ON
  "udlr OA OB OD OC
  "C-udlr [1;5A [1;5B [1;5D [1;5C
  "M-udlr [1;3A [1;3B [1;3D [1;3C
  "S-udlr [1;2A [1;2B [1;2D [1;2C

  set <C-Right>=[1;5C
  set <C-Left>=[1;5D
  nmap [1;5A <C-Up>
  imap [1;5A <C-Up>
  xmap [1;5A <C-Up>
  nmap [1;5B <C-Down>
  imap [1;5B <C-Down>
  xmap [1;5B <C-Down>
  " vim complains if we try set <M-Left/Right/Up/Down> = ...
  nmap [1;3A <M-Up>
  imap [1;3A <M-Up>
  xmap [1;3A <M-Up>
  nmap [1;3B <M-Down>
  imap [1;3B <M-Down>
  xmap [1;3B <M-Down>
  nmap [1;3C <M-Right>
  imap [1;3C <M-Right>
  nmap [1;3D <M-Left>
  imap [1;3D <M-Left>
endif
" The alternative, if there are other inconsistencies in vim, or if other
" programs need xterm-like sequences, is to enable xterm-keys in tmux and
" try something along the lines of nmap [1;3A <M-Up>, nmap [1;3B <M-Down>,
" or maybe use tmux's terminal-overrides string option to match the set termcap
" shown in vim inside a pty.
"}}}
" Q <C-q> <C-c>: QUICK EXIT {{{
nnoremap Q :qa<CR>
nnoremap !Q :qa!<CR>
nnoremap <C-q> :qa<CR>
inoremap <C-c> <ESC>
"}}}
" UP/DOWN MAPPINGS {{{
" revert the semantic: normal <up>,<down>,j,k keys move the cursor by visual line
nnoremap j gj
nnoremap k gk
nnoremap <up> gk
nnoremap <down> gj
xnoremap <up> gk
xnoremap <down> gj
" and gj,gk move the cursor by physical line (g<up>, g<down> not mapped, for now)
nnoremap gj j
nnoremap gk k
xnoremap gj <down>
xnoremap gk <up>
inoremap <expr> <Up> pumvisible() ?
      \ "\<Up>" :
      \ "\<C-o>gk"
inoremap <expr> <Down> pumvisible() ?
      \ "\<Down>" :
      \ "\<C-o>gj"
"}}}
" Faster scrolling {{{
nnoremap <C-E> 4<C-E>
nnoremap <C-Y> 4<C-Y>
" }}}
" MISCELLANEOUS {{{
" go to tag location if only 1 place, or show selection if more than 1 place
nnoremap <C-]> :vertical stjump <C-r><C-w><CR>
" gah
xnoremap <END> g_
xnoremap $ g_
" Session Save As and Open
nnoremap <leader>ssa :mksession! ~/.vim/sessions/
nnoremap <leader>so :source ~/.vim/sessions/
nnoremap <leader>ww :<C-u>pwd<cr>
nnoremap <C-g> :nohlsearch<CR>:call clearmatches()<CR><C-g>
nnoremap <leader><F5> :h grota_documentation<CR>
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
"}}}
" DIFF {{{
" Diff mode only mappings.
" Center the screen upon moving to the next diff chunk.
" I don't care what the manual says, I don't like asymmetry,
" dg/dp in normal/visual mode.
" Don't ask me why, but I need to remap dp to dp,
" I thinks this is yankring's fault.
autocmd FilterWritePre * if &diff|
      \ nnoremap <buffer> <leader>du :let l=line(".")<CR>\|:<C-U>diffupdate<CR>\|:exe "normal! ".l."G"<CR>zz|
      \ nnoremap <buffer> dp dp]czz|
      \ nnoremap <buffer> dg do]czz|
      \ nnoremap <buffer> do <nop>|
      \ xnoremap <buffer> dp :diffput<CR>|
      \ xnoremap <buffer> dg :diffget<CR>|
      \ nnoremap <buffer> <leader>dw :call ToggleDiffWhitespace()<CR>|
      \ nnoremap <buffer> <M-Left> 13z<Left>|
      \ nnoremap <buffer> <M-Right> 13z<Right>|
      \ normal gg|
      \ endif
autocmd WinEnter * if &diff==0|
      \ if maparg('dp','x') !=# ''|
      \ xunmap <buffer> dp|
      \ endif|
      \ if maparg('dg','x') !=# ''|
      \ xunmap <buffer> dg|
      \ endif|
      \ if maparg('dp','n') !=# ''|
      \ nunmap <buffer> dp|
      \ endif|
      \ if maparg('dg','n') !=# ''|
      \ nunmap <buffer> dg|
      \ endif|
      \ try|
      \ nunmap <buffer> do|
      \ catch /.*/|
      \ endtry|
      \ endif
autocmd User GrotaDiffOff if maparg('<M-Left>','n') =~ '13z'|
      \ nunmap <buffer> <M-Left>|
      \ endif|
      \ if maparg('<M-Right>','n') =~ '13z'|
      \ nunmap <buffer> <M-Right>|
      \ endif

let g:diffwhitespaceon = 0
function! ToggleDiffWhitespace()
    if g:diffwhitespaceon
        set diffopt-=iwhite
        set diffexpr&
        let g:diffwhitespaceon = 0
    else
        set diffopt+=iwhite
        set diffexpr=CallDiffDashWonIwhite()
        let g:diffwhitespaceon = 1
    endif
    diffupdate
    " needed to cope with a strange issue with terminal vim
    tabedit | tabclose
endfunc
function! CallDiffDashWonIwhite()
  let opt = ""
  if &diffopt =~ "icase"
    let opt = opt . "-i "
  endif
  if &diffopt =~ "iwhite"
    let opt = opt . "-w "
  endif
  silent execute "!diff -a --binary " . opt . v:fname_in . " " . v:fname_new . " > " . v:fname_out
endfunction

"}}}
" FOLD NAVIGATION {{{
nnoremap z<Down> zj
nnoremap z<Up> zk
"}}}
"}}}

" EASIER TEXT EDITING {{{
" gV < >: VISUAL SELECTIONS AND SHIFTING {{{
" visual shifting (does not exit Visual mode)
xnoremap < <gv
xnoremap > >gv
" Visually select the text that was last edited/pasted
nnoremap gV `[v`]
xnoremap <BS> x
"}}}
" ,y ,p: YANKING AND PASTING {{{
xnoremap <Leader>y "+ygv"*y`>
nnoremap <Leader>yf :let @+=expand("%")<CR>:echo 'copied '.expand("%")<CR>
nnoremap <Leader>p "+gp
nnoremap <Leader>P :<C-U>put<CR>
inoremap <C-o>p <Left><Right><C-o>p<End>
"}}}
" <C-s> QUICK SAVING {{{
nnoremap <C-s> :update<CR>
inoremap <C-s> <C-o>:update<CR>
"}}}
" nix_<M-UP/DOWN> MOVE LINES UP/DOWN {{{
nnoremap <M-Down> :m+<CR>==
nnoremap <M-Up> :m-2<CR>==
inoremap <M-Down> <Esc>:m+<CR>==gi
inoremap <M-Up> <Esc>:m-2<CR>==gi
xnoremap <M-Down> :m'>+<CR>gv=gv
xnoremap <M-Up> :m-2<CR>gv=gv
"}}}
" <CR> SPLIT LINE {{{
nnoremap <CR> i<cr><esc>`.
"}}}
" i_<M-w> delete the word after the cursor {{{
inoremap <M-w> <C-o>dw
"}}}
" Substitute {{{
nnoremap & :&&<CR>
xnoremap & :&&<CR>
"}}}
"}}}
"}}}

" CORE FTPLUGIN/SYNTAX SETTINGS {{{
" See $VIMRUNTIME/{syntax,ftplugin}/* for more details
let g:vimsyn_folding = 'af'
let g:is_bash = 1
let g:sh_fold_enabled=7
" Display error for unmatched )]}
"let php_parent_error_close=1
" There's also a contrib plugin that fold phpdoc sections out there,
" but I'm not using it.
let g:php_folding = 2
" use K on a proposed line in an interactive gitrebase to see the corresponding diff
autocmd FileType gitrebase nnoremap <buffer> <silent> S :Cycle<CR>
autocmd FileType gitcommit nnoremap <buffer> <silent> <leader>d :DiffGitCached<CR>:wincmd L<CR>
" }}}

" CONTRIB PLUGINS MAPPINGS AND SETTINGS {{{
" vim-cycle {{{
let g:cycle_no_mappings = 1
autocmd FileType php call AddCycleGroup('php', ['TRUE', 'FALSE'])
nmap <leader>C <Plug>CycleNext
" }}}
" tagbar plugin {{{
nnoremap <silent> <F10> :TagbarToggle<CR>
let g:tagbar_autofocus = 1
let g:tagbar_type_php = {
      \ 'kinds' : [
      \ 'd:constant definitions:1',
      \ 'i:interfaces:1',
      \ 'c:classes:1',
      \ 'f:functions:0',
      \ 'j:javascript functions:1',
      \ ]
      \ }
nnoremap <silent> <leader>fs :TagbarCurrentTag 'p'<CR>
"}}}
" Fugitive {{{
" Map .. to go back to the parent dir when you are in a git (fugitive)
" tree|blob buffer
autocmd BufEnter fugitive://**//[0-3]/** let b:autotagDisabled=1
autocmd User Fugitive
      \ if fugitive#buffer().type() =~# '^\%(tree\|blob\)$' |
      \   nnoremap <buffer> .. :edit %:h/<CR> |
      \ endif
nnoremap <M-d> :Gdiff<CR>gg]czz
function! s:MyGgrepWrapper(pfx)
  let l:input=input("git-grep for: ", expand("<cword>"))
  if l:input == ''
    echo ""
    return
  endif
  if (a:pfx == 'c')
    execute "Ggrep! " . shellescape(l:input)
    botright copen
  else
    execute "Glgrep! " . shellescape(l:input)
    botright lopen
  endif
endfunction
nnoremap <leader>gg  :call <SID>MyGgrepWrapper('l')<CR>
nnoremap <leader>gq  :call <SID>MyGgrepWrapper('c')<CR>
nnoremap <leader>gw  :Gw<CR>
nnoremap <leader>gs  :Gstatus<CR>
nnoremap <M-s> :Gstatus<CR>
nnoremap <leader>gc  :Gcommit -v<CR>
"}}}
" Surround {{{
" php: a => array(xxx)
autocmd FileType php let b:surround_97 = "array('\r')"
" php: S => var_export(xxx, true);
autocmd FileType php let b:surround_83 = "var_export(\r, TRUE)"
" php: p => ['xxx']
autocmd FileType php let b:surround_112 = "'[\r]'"
" php: l => ->xxx
autocmd FileType php let b:surround_108 = "->\r"
" markdown: l => [xxx]
autocmd FileType markdown let b:surround_108 = "[\r][\1link text or number: \1]"
" markdown 6 => ***xxx***
autocmd FileType markdown let b:surround_54 = "***\r***"
" markdown 7 => **xxx**
autocmd FileType markdown let b:surround_55 = "**\r**"
" 8 => *xxx*
let g:surround_56 = "*\r*"
"}}}
" Yankstack {{{
let g:yankstack_yank_keys = ['c', 'C', 'd', 'D', 'x', 'X', 'y', 'Y']
let g:yankstack_map_keys = 0
call yankstack#setup()
nmap Y y$
nmap <M-m> <Plug>yankstack_substitute_older_paste
xmap <M-m> <Plug>yankstack_substitute_older_paste
imap <M-m> <Plug>yankstack_substitute_older_paste
nmap <M-n> <Plug>yankstack_substitute_newer_paste
xmap <M-n> <Plug>yankstack_substitute_newer_paste
imap <M-n> <Plug>yankstack_substitute_newer_paste
"}}}
" ctrlp {{{
let g:ctrlp_map = '<C-F>'
let g:ctrlp_cmd = 'CtrlPMRUFiles'
" Show only mru files in the current working directory
let g:ctrlp_mruf_relative = 1
" Sedd the prompt with the current file's relative path
"let g:ctrlp_default_input = 1
"let g:ctrlp_working_path_mode = 0
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_highlight_match = [1, 'Pmenu']
let g:ctrlp_open_multiple_files = '1vr'
let g:ctrlp_max_height = 20
" only jump to the buffer if it‚Äôs opened in the current tab
let g:ctrlp_switch_buffer = 'E'
" "w": current word
" "s": search
" "v": visual
" "c": clipboard
let g:ctrlp_prompt_mappings = {
      \ 'PrtInsert("w")':       ['<F2>', '<M-w>'],
      \ 'PrtInsert("s")':       ['<F3>', '<M-s>'],
      \ 'PrtInsert("v")':       ['<F4>', '<M-v>'],
      \ 'PrtInsert("c")':       ['<F6>', '<M-c>'],
      \ 'AcceptSelection("h")': ['<c-cr>', '<c-s>'],
      \ 'AcceptSelection("t")': ['<c-t>', '<F3>'],
      \}
let g:ctrlp_extensions = ['line']
nnoremap <silent> <C-\> :CtrlPBuffer<CR>
"nnoremap <silent> <M-b> :CtrlPBuffer<CR>
nnoremap <silent> <M-g> :CtrlPLine<CR>
let g:ctrlp_buffer_func = { 'enter': 'GrotaDeleteBufferMapping' }
func! GrotaDeleteBufferMapping()
    nnoremap <buffer> <silent> <c-x> :call <sid>DeleteBuffer()<cr>
endfunc
func! s:DeleteBuffer()
  let bufname = getline('.')[2:]
  if bufname =~# 'No Name'
    let bufname = bufname[1]
  else
    let bufname = fnamemodify(bufname, ':p')
  endif
  exec "bd" bufname
  exec "norm \<F5>"
endfunc
"}}}
" Lusty-Juggler/Explorer {{{
" Lusty-Juggler
let g:loaded_lustyjuggler=1
"let g:LustyJugglerDefaultMappings  = 0
"let g:LustyJugglerAltTabMode = 1 "enables the mapping below
"nnoremap <silent> <C-\> :LustyJuggler<CR>
" Lusty-Explorer
let g:LustyExplorerDefaultMappings = 0
nnoremap <silent> <C-b> :LustyFilesystemExplorerFromHere<CR>
"}}}
" Syntastic {{{
"let g:syntastic_enable_signs = 1
"let g:syntastic_phpcs_disable = 1
let g:syntastic_php_phpcs_args = '--standard=' . $HOME . '/.composer/vendor/drupal/coder/coder_sniffer/Drupal'
let g:syntastic_auto_loc_list = 0
nnoremap <Leader>st :SyntasticToggleMode<cr>
"}}}
" vim-markology {{{
let g:markology_enable = 0
"}}}
" Autotag {{{
" Specify 40MB as the maximum size of the tags file to be considered by autotag
let g:autotagmaxTagsFileSize=1024*1024*40
"}}}
" Powerline {{{
let g:Powerline_cache_file = $HOME.'/.vim/vim_powerline.cache'
" see: https://github.com/fncll/vimstuff/blob/master/powerline-fonts/SourceCodePro-Semibold-Powerline.otf
let g:Powerline_symbols = 'fancy'
let g:Powerline_colorscheme = 'powerline_grota'
call Pl#Theme#ReplaceSegment('tagbar:currenttag', 'tagbar:fullcurrenttag')
"}}}
" SnipMate {{{
imap <C-B> <Plug>snipMateNextOrTrigger
smap <C-B> <Plug>snipMateNextOrTrigger
imap <C-R><C-B> <Plug>snipMateShow
"imap ... <Plug>snipMateBack
" }}}
" Supertab {{{
let g:SuperTabDefaultCompletionType = "context"
let g:SuperTabLongestHighlight = 1
" Supertab takes care of the following, which are not needed anymore, I keep
" these here for future reference.
" This is done to select the first entry in the menu. Not very useful, but still.
" This also renders the longest value in completeopt pretty useless.
" with menuone in completeopt, the pum is always visible
"inoremap <expr> <C-X><C-O> pumvisible() ? '<C-X><C-O><C-N><C-P>' : '<C-X><C-O>'
"inoremap <expr> <Esc>      pumvisible() ? "\<C-e>" : "\<Esc>"
"inoremap <expr> <CR>       pumvisible() ? "\<C-y>" : "\<CR>"
"}}}
" DirDiff {{{
" ,dj ,dk per diff
for map in ['Get', 'Put', 'Next', 'Prev']
  exec 'nmap <plug>NoopDirDiff'.map.' <Plug>DirDiff'.map
endfor
"}}}
" Gitv {{{
nnoremap <leader>gl :<C-U>Gitv --all<CR>
let g:Gitv_DoNotMapCtrlKey = 1
"}}}
" SplitJoin {{{
"let g:splitjoin_split_mapping = '<Leader>ss'
"let g:splitjoin_join_mapping = '<Leader>sj'
" }}}
" autopairs {{{
" <M-p> mapped to AutoPairsToggle
let g:AutoPairsShortcutJump='<M-/>'
let g:AutoPairsShortcutFastWrap=''
" Oddly enough this isn't called for ruby (?)
autocmd BufEnter * call AutoPairsTryInit()
let g:AutoPairsMapBS = 0
let g:AutoPairsMapCR = 0
let g:AutoPairsMapSpace = 0
"}}}
" Sparkup {{{
" see the FileType autocommands below for the real mappings
let g:sparkupExecuteMapping = '<Plug>SparkupExecuteMapping'
let g:sparkupNextMapping = '<Plug>SparkupNextMapping'
"}}}
" Vdebug {{{
let g:vdebug_keymap = {
\    "run" : "<F8>",
\    "set_breakpoint" : "<leader><F10>",
\    "run_to_cursor" : "<leader><F1>",
\    "step_over" : "<F6>",
\    "step_into" : "<F7>",
\    "step_out" : "<leader><F4>",
\    "close" : "<leader><F6>",
\    "detach" : "<leader><F7>",
\    "get_context" : "<leader><F8>",
\    "eval_under_cursor" : "<leader><F12>",
\}

" port must match the parameter in /etc/php5/conf.d/20-xdebug.ini
let g:vdebug_options= {
\    "port" : 8585,
\    "server" : 'localhost',
\    "timeout" : 2000,
\    "on_close" : 'close',
\    "break_on_open" : 0,
\    "ide_key" : '',
\    "remote_path" : "",
\    "local_path" : "",
\    "debug_window_level" : 0,
\    "debug_file_level" : 10,
\    "debug_file" : "/tmp/vdebug",
\    "continuous_mode" : 0,
\}
nnoremap <Leader>br :BreakpointRemove *<CR>
" }}}
" Vimux {{{
let g:VimuxUseNearestPane = 1
let g:VimuxOrientation = "h"
let g:VimuxHeight = "40"
function! VimuxSlime()
  if !exists("g:VimuxRunnerPaneIndex") || _VimuxHasPane(g:VimuxRunnerPaneIndex) == -1
    call VimuxOpenRunner()
  endif
  call VimuxSendText(@v)
  call VimuxSendKeys("Enter")
endfunction
nnoremap <Leader>rl :VimuxRunLastCommand<CR>
vnoremap <Leader>v "vy  :call VimuxSlime()<CR>
nnoremap <Leader>v "vyy :call VimuxSlime()<CR>
" }}}
" Turbux {{{
let g:turbux_command_rspec = 'rspec --drb'
let g:turbux_command_cucumber = 'cucumber --drb'
let g:no_turbux_mappings = 1
map <leader>T <Plug>SendTestToTmux
map <leader>t <Plug>SendFocusedTestToTmux
" }}}
" Signify {{{
let g:signify_vcs_list = ['git']
let g:signify_sign_change = '~'
"let g:signify_diffoptions = { 'git': '--patience' }
" }}}
" vim-sneak {{{
" Disable streak mode, it's not easy to see where the cursor is at the
" beginning
"let g:sneak#streak = 1
let g:sneak#use_ic_scs = 1
nmap ; <Plug>SneakPrevious
omap ; <Plug>SneakPrevious
xmap ; <Plug>SneakPrevious
nmap ' <Plug>SneakNext
omap ' <Plug>SneakNext
xmap ' <Plug>SneakNext
"replace 'f' with inclusive 1-char Sneak
nmap f <Plug>Sneak_f
nmap F <Plug>Sneak_F
xmap f <Plug>Sneak_f
xmap F <Plug>Sneak_F
omap f <Plug>Sneak_f
omap F <Plug>Sneak_F
"replace 't' with exclusive 1-char Sneak
nmap t <Plug>Sneak_t
nmap T <Plug>Sneak_T
xmap t <Plug>Sneak_t
xmap T <Plug>Sneak_T
omap t <Plug>Sneak_t
omap T <Plug>Sneak_T
" }}}
" EasyGrep {{{
let g:EasyGrepCommand=1
let g:EasyGrepSearchCurrentBufferDir=0
let g:EasyGrepRecursive=1
" }}}
" vim-easy-align {{{
vmap <leader>a <Plug>(EasyAlign)
nmap <leader>a <Plug>(EasyAlign)
" }}}
"}}}

" CUSTOM PLUGINS MAPPINGS AND SETTINGS {{{
" ,q/,l quickfix/location list toggle {{{
nnoremap <leader>q :QFToggle<CR>
nnoremap <leader>l :LLToggle<CR>
"}}}
" ,xs for syntax class {{{
function! SynStack()
  if !exists("*synstack")
    return
  endif
  echo join(map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")'), " > ")
endfunc
nnoremap <leader>xs :call SynStack()<CR>
"}}}
" * and # in visual {{{
function! s:VSetSearch()
  let temp = @@
  norm! gvy
  let @/ = '\V' . substitute(escape(@@, '\'), '\n', '\\n', 'g')
  let @@ = temp
  call histadd('/', @/)
endfunction
xnoremap * :<C-u>call <SID>VSetSearch()<CR>//<CR><C-O>
xnoremap # :<C-u>call <SID>VSetSearch()<CR>??<CR><C-O>
"}}}
" Highlight Word {{{
"
" This mini-plugin provides a few mappings for highlighting words temporarily.
"
" Sometimes you're looking at a hairy piece of code and would like a certain
" word or two to stand out temporarily.  You can search for it, but that only
" gives you one color of highlighting.  Now you can use <leader>N where N is
" a number from 1-6 to highlight the current word in a specific color.

function! HiInterestingWord(n) " {{{
    " Save our location.
    normal! mz

    " Yank the current word into the z register.
    normal! "zyiw

    " Calculate an arbitrary match ID.  Hopefully nothing else is using it.
    let mid = 86750 + a:n

    " Clear existing matches, but don't worry if they don't exist.
    silent! call matchdelete(mid)

    " Construct a literal pattern that has to match at boundaries.
    let pat = '\V\<' . escape(@z, '\') . '\>'

    " Actually match the words.
    call matchadd("InterestingWord" . a:n, pat, 1, mid)

    " Move back to our original location.
    normal! `z
endfunction " }}}
" Mappings {{{
nnoremap <silent> <leader>1 :call HiInterestingWord(1)<cr>
nnoremap <silent> <leader>2 :call HiInterestingWord(2)<cr>
nnoremap <silent> <leader>3 :call HiInterestingWord(3)<cr>
nnoremap <silent> <leader>4 :call HiInterestingWord(4)<cr>
nnoremap <silent> <leader>5 :call HiInterestingWord(5)<cr>
nnoremap <silent> <leader>6 :call HiInterestingWord(6)<cr>
" }}}
"}}}
"}}}

" AUTOCOMMANDS {{{
" highlight cursorline only for current window
autocmd WinLeave * setlocal nocursorline
autocmd WinEnter * setlocal cursorline
if version >= 703
  " Enable relativenumber just for php for now
  autocmd FileType php setlocal relativenumber
        \| setlocal number
        \| call SuperTabSetDefaultCompletionType("<c-p>")
endif
" Auto close the preview window that pops up in php omnicomplete mode
" DiffGitCached is opened in a preview window so we check for ft=php
autocmd InsertLeave * if (pumvisible() == 0 && &ft ==# 'php')|silent! pclose|endif
" Help on the right
autocmd FileType help wincmd L
" Red line for gitcommit
autocmd FileType gitcommit setlocal colorcolumn=+1
" Quickfix window: no numbers
autocmd Filetype qf setlocal nonumber
" restore default functionality.
autocmd BufReadPost quickfix nnoremap <buffer> <CR> <CR>
" html,xhtml,xml: use Omnicomplete for (super)tab, don't autoclose <>
autocmd Filetype html,xhtml,xml call SuperTabSetDefaultCompletionType("<c-x><c-o>")
      \| let b:delimitMate_matchpairs = "(:),[:],{:}"
autocmd FileType html,xhtml,xml,php,eruby nmap <buffer> <leader>se <Plug>SparkupExecuteMapping
      \| imap <buffer> <C-G><C-H> <Plug>SparkupNextMapping
" this matches the conflict markers
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'
au InsertEnter * hi CursorLine ctermbg=17
au InsertLeave * hi CursorLine ctermbg=234
"}}}

" ABBREVIATIONS {{{
iabbrev FLASE FALSE
iabbrev flase false
" }}}

" NOTES {{{
"augroup last_search
  "autocmd!
  "autocmd WinLeave * let w:last_search = @/
  "autocmd WinEnter * if exists('w:last_search') | let @/ = w:last_search | endif
"augroup END
" i_<C-z,b,f> can be remapped
" <F6,7,8> can be mapped
" NoMatchParen ?
" }}}
