" vim:ft=vim:foldmethod=marker:foldcolumn=3:foldlevel=0

" INITIALIZATION "{{{
set nocompatible
filetype off
runtime macros/matchit.vim
" pathogen as a submodule. source it explicitly.
runtime bundle/tpope_vim-pathogen/autoload/pathogen.vim
" Pathogen callbacks
call pathogen#infect()
call pathogen#helptags()
" vim's filetype specific code is good stuff
filetype plugin indent on
if has("gui_running")
  " a nice coloscheme easy to the eye, it sets the 'background' option
  colorscheme koehler
  " Hide the Toolbar
  set guioptions-=T
  " Don't load $VIMRUNTIME/menu.vim
  set guioptions+=M
  " Hide the Menu
  set guioptions-=m
  set guiheadroom=0
  " Set gui font
  set guifont=Monospace\ 10
else
  set background=dark
endif
colorscheme grota
syntax enable
"}}}

" VIM OPTIONS {{{
set scrolloff=1 "keep 1 line above and below the cursor
set mouse=a " let's try using the mouse for a while
set ignorecase " ignore case if search pattern is all lowercase, case-sensitive otherwise
set smartcase
set showcmd " show partial command on last line
set autoindent
set smartindent " extends indent functionalites of autoindent. works well for C-like sources
set expandtab " expandtab to spaces
set shiftwidth=2 " shiftwidth: Number of spaces to use for each step of (auto)indent.
set tabstop=2 " tabstop: Number of spaces that a <Tab> in the file counts for.
set shiftround " use multiple of shiftwidth when indenting with '<' and '>'
set hls " highlist searches (set hlsearch). Use :noh[lsearch] to disable temporarily
set list " show the listchars in vim
set listchars=tab:‚ñ∏\ ,trail:¬∑,extends:‚ùØ,nbsp:¬∑,precedes:‚ùÆ
set showbreak=‚Ü™
set history=400
set backspace=indent,eol,start
set hidden " simply hide a modified buffer when switching to another.
set gdefault " search/replace globally (on a line) by default
set pastetoggle=<F5>
set sidescrolloff=37 "keep N chars at the left and right of the cursor, see also sidescroll below
set sidescroll=12 "When vim needs to scroll horizontally do it smoothly by moving 12 chars. 1 is not enough
set cursorline " the line the cursor is on is underlined
set wildmenu
set wildmode=longest,full
set wildignore+=.hg,.git,.svn   " Version control
set dir-=. " remove current dir as a possibility of where to save the swap file
set nobackup " default is already off, but just to be sure.
set splitbelow " horizontal split below as default
set splitright " vertical split on the right as default
set whichwrap=b,s,<,>,[,] "left and right, in insert e normal mode wrap lines
set ruler
set laststatus=2 " when to show the extra status line: 2=always, 1=only if there are at least two windows
set keymodel=startsel
" This will look in the directory of the current file for 'tags', and work up the tree towards root until one is found.
set tags=./tags;
set completeopt=longest,menuone,preview
set virtualedit+=block
set clipboard=autoselect,unnamed,exclude:cons\|linux
" don't use the tag file for i_<C-N> and i_<C-P>
" for php, omnicomplete in autoload/phpcomplete.vim already does that
set complete-=t
" and no included files either
set complete-=i
" choose what to save in the session files.
" disable the useless ones and
" the ones that we already load from the .vimrc
set sessionoptions-=options
set sessionoptions-=help
set sessionoptions-=blank
" fold are dynamically created, we also expand all folds
" upon BufReadPost *.php, see after/plugin/after_actions.vim
set sessionoptions-=folds
set foldmethod=syntax
" defaults is no folds closed
set foldlevelstart=99
" used for knowing when to save to the swap file and for the CursorHold event
set updatetime=500
set encoding=utf-8
" doesn't really work on terminal vim
if has("balloon_eval") && has("gui_running")
  set ballooneval
endif
set showtabline=2
set tabline=%!GrotaTabLine()
"}}}

" VIM PLAIN MAPPINGS {{{
let mapleader = ","
" EASIER NAVIGATION {{{
" VERY OPINIONATED REMAPPINGS {{{
nnoremap <space> :
xnoremap <space> :
nnoremap \ `
nnoremap ` '
nnoremap ' ;
xnoremap ' ;
nnoremap ; ,
xnoremap ; ,
set <M-'>='
nnoremap <M-'> g_
xnoremap <M-'> g_
inoremap <M-'> <C-o>$
inoremap <M-Right> <C-o>$
set <M-;>=;
nnoremap <M-;> ^
xnoremap <M-;> ^
inoremap <M-;> <C-o>^
inoremap <M-Left> <C-o>^
"}}}
" USE <M-LEFT/RIGHT> TO SCROLL LEFT/RIGHT {{{
nnoremap <M-Left> 13z<Left>
nnoremap <M-Right> 13z<Right>
" }}}
" USE nix_<M-HJKL> TO MOVE IN FINER STEPS {{{
set <M-k>=k
set <M-j>=j
set <M-h>=h
set <M-l>=l
inoremap <M-k> <C-o>gk
inoremap <M-j> <C-o>gj
inoremap <M-h> <left>
inoremap <M-l> <right>
nnoremap <M-k> gk
nnoremap <M-j> gj
nnoremap <M-h> <left>
nnoremap <M-l> <right>
xnoremap <M-k> gk
xnoremap <M-j> gj
xnoremap <M-h> <left>
xnoremap <M-l> <right>
"}}}
" USE nix_<C-HJKL> TO MOVE BETWEEN WORDS {{{
inoremap <C-l> <C-o>E<Right>
inoremap <C-h> <C-o>B
inoremap <C-j> <C-o>gj
inoremap <C-k> <C-o>gk
nnoremap <C-l> E<Right>
nnoremap <C-h> B
nnoremap <C-j> 3gj
nnoremap <C-k> 3gk
xnoremap <C-l> E<Right>
xnoremap <C-h> B
xnoremap <C-j> 3gj
xnoremap <C-k> 3gk
" }}}
" <C-Up/Down/Left/Right>: EASY WINDOW RESIZING {{{
nnoremap <silent> <C-Left>  3<C-W><
nnoremap <silent> <C-Down>  3<C-W>-
nnoremap <silent> <C-Up>    3<C-W>+
nnoremap <silent> <C-Right> 3<C-W>>
"}}}
" <C-W>{} WINDOW SWAPPING {{{
nnoremap <C-w>{ <C-w>R
nnoremap <C-w>} <C-w>r
" }}}
" WINDOWS SPLIT/MAXIMIZE/CLOSE/ONLY/CYCLE {{{
" cycle through windows
nnoremap <tab> <C-W>w
nnoremap <S-tab> <C-W>W
" Close/Only window
nmap <F1> <C-W>o:diffoff<CR>
nnoremap <F2> <C-W>c
nnoremap <Leader>z <C-W>c
"}}}
" TABS OPEN/CLOSE/NAVIGATE {{{
nnoremap <F4> :<C-u>tabclose<CR>
nnoremap <F3> :<C-u>tabedit<CR>
set <M-.>=.
set <M-,>=,
nnoremap <silent> <M-.> :<C-u>tabnext<CR>
nnoremap <silent> <M-,> :<C-u>tabprevious<CR>
inoremap <silent> <M-,> <Esc>:<C-u>tabprevious<CR>
inoremap <silent> <M-.> <Esc>:<C-u>tabnext<CR>
" }}}
" <C-n><C-p>: NEXT/PREV BUFFER {{{
" <C-N> was the same as <Down> and I didn't need it.
nnoremap <silent> <C-n> :bn<CR>
nnoremap <silent> <C-p> :bp<CR>
"}}}
" <C-Up/Down/Left/Right><M-Up/Down/Left/Right> FOR TMUX {{{
if $TMUX !=# ''

  " TMUX with xterm-key OFF
  "udlr OA OB OD OC
  "C-udlr [A [B [D [C
  "M-udlr <up> <down> <left> <right>
  "S-udlr N/A

  " TMUX with xterm-key ON
  "udlr OA OB OD OC
  "C-udlr [1;5A [1;5B [1;5D [1;5C
  "M-udlr [1;3A [1;3B [1;3D [1;3C
  "S-udlr [1;2A [1;2B [1;2D [1;2C

  " enable C-left/right with tmux's xterm-key off
  " vim complains if we try set <C-Up/Down> = ...
  set <C-Right>=[C
  set <C-Left>=[D
  nmap [A <C-Up>
  imap [A <C-Up>
  xmap [A <C-Up>
  nmap [B <C-Down>
  imap [B <C-Down>
  xmap [B <C-Down>
  " vim complains if we try set <M-Left/Right/Up/Down> = ...
  " for dragging up/down lines
  nmap <Down> <M-Down>
  imap <Down> <M-Down>
  xmap <Down> <M-Down>
  nmap <Up> <M-Up>
  imap <Up> <M-Up>
  xmap <Up> <M-Up>
  " for diff horizontal scrolling and moving to start/end of line
  nmap <Left> <M-Left>
  imap <Left> <M-Left>
  nmap <Right> <M-Right>
  imap <Right> <M-Right>
endif
" The alternative, if there are other inconsistencies in vim, or if other
" programs need xterm-like sequences, is to enable xterm-keys in tmux and
" try something along the lines of nmap [1;3A <M-Up>, nmap [1;3B <M-Down>,
" or maybe use tmux's terminal-overrides string option to match the set termcap
" shown in vim inside a pty.
"}}}
" Q <C-q> <C-c>: QUICK EXIT {{{
nnoremap Q :qa<CR>
nnoremap !Q :qa!<CR>
nnoremap <C-q> :qa<CR>
inoremap <C-c> <ESC>
"}}}
" UP/DOWN MAPPINGS {{{
" revert the semantic: normal <up>,<down>,j,k keys move the cursor by visual line
nnoremap j gj
nnoremap k gk
nnoremap <up> gk
nnoremap <down> gj
xnoremap <up> gk
xnoremap <down> gj
" and gj,gk move the cursor by physical line (g<up>, g<down> not mapped, for now)
nnoremap gj j
nnoremap gk k
xnoremap gj <down>
xnoremap gk <up>
inoremap <expr> <Up> pumvisible() ?
      \ "\<Up>" :
      \ "\<C-o>gk"
inoremap <expr> <Down> pumvisible() ?
      \ "\<Down>" :
      \ "\<C-o>gj"
"}}}
" Faster scrolling {{{
nnoremap <C-E> 4<C-E>
nnoremap <C-Y> 4<C-Y>
" }}}

" MISCELLANEOUS {{{
" go to tag location if only 1 place, or show selection if more than 1 place
nnoremap <C-]> g<C-]>
" gah
xnoremap <END> <END>h
" Session Save As and Open
nnoremap ssa :mksession! ~/.vim/sessions/
nnoremap so :so ~/.vim/sessions/
nnoremap <leader>ww :<C-u>pwd<cr>
nnoremap <C-g> :nohlsearch<CR><C-g>
nnoremap <F5> :h grota_documentation<CR>
" Change Working Directory to that of the current file
cmap cd. lcd %:p:h
cnoremap <C-A> <Home>
"}}}
" DIFF {{{
" Diff mode only mappgins.
" Center the screen upon moving to the next diff chunk.
" I don't care what the manual says, I don't like asymmetry,
" dg/dp in normal/visual mode.
" Don't ask me why, but I need to remap dp to dp,
" I thinks this is yankring's fault.
autocmd FilterWritePre * if &diff|
      \ nnoremap <buffer> ]c ]czz|
      \ nnoremap <buffer> [c [czz|
      \ nnoremap <buffer> <leader>du :let l=line(".")<CR>\|:<C-U>diffupdate<CR>\|:exe "normal! ".l."G"<CR>zz|
      \ nnoremap <buffer> dp dp]czz|
      \ nnoremap <buffer> dg do]czz|
      \ nnoremap <buffer> do <nop>|
      \ xnoremap <buffer> dp :diffput<CR>|
      \ xnoremap <buffer> dg :diffget<CR>|
      \ normal gg|
      \ endif
autocmd WinEnter * if &diff==0|
      \ if maparg('dp','x') !=# ''|
      \ xunmap <buffer> dp|
      \ endif|
      \ if maparg('dg','x') !=# ''|
      \ xunmap <buffer> dg|
      \ endif|
      \ if maparg('dp','n') !=# ''|
      \ nunmap <buffer> dp|
      \ endif|
      \ if maparg('dg','n') !=# ''|
      \ nunmap <buffer> dg|
      \ endif|
      \ try|
      \ nunmap <buffer> do|
      \ catch /.*/|
      \ endtry|
      \ endif
"}}}
" FOLD NAVIGATION {{{
nnoremap z<Down> zj
nnoremap z<Up> zk
"}}}
"}}}

" EASIER TEXT EDITING {{{
" gV < >: VISUAL SELECTIONS AND SHIFTING {{{
" visual shifting (does not exit Visual mode)
xnoremap < <gv
xnoremap > >gv
" Visually select the text that was last edited/pasted
nnoremap gV `[v`]
"}}}
" Y ,y ,Y ,p: YANKING AND PASTING {{{
" yankring does not map Y so we don't need to put it inside YRRunAfterMaps
xnoremap <Leader>y "+y`>
nnoremap <Leader>p "+gp
"}}}
" <C-s> QUICK SAVING {{{
nnoremap <C-s> :w<CR>
inoremap <C-s> <C-o>:w<CR>
"}}}
" nix_<M-UP/DOWN> MOVE LINES UP/DOWN {{{
nnoremap <M-Down> :m+<CR>==
nnoremap <M-Up> :m-2<CR>==
inoremap <M-Down> <Esc>:m+<CR>==gi
inoremap <M-Up> <Esc>:m-2<CR>==gi
xnoremap <M-Down> :m'>+<CR>gv=gv
xnoremap <M-Up> :m-2<CR>gv=gv
"}}}
" S SPLIT LINE {{{
" (sister to [J]oin lines). The normal use of S is covered by cc,
" so don't worry about shadowing it
nnoremap S i<cr><esc>`.
"}}}
" i_<M-w> delete the word after the cursor {{{
inoremap <M-w> <C-o>dw
"}}}
"}}}
"}}}

" CORE FTPLUGIN/SYNTAX SETTINGS {{{
" See $VIMRUNTIME/{syntax,ftplugin}/* for more details
let g:vimsyn_folding = 'af'
let g:is_bash = 1
let g:sh_fold_enabled=7
" Display error for unmatched )]}
"let php_parent_error_close=1
" There's also a contrib plugin that fold phpdoc sections out there,
" but I'm not using it.
let g:php_folding = 2
" use K on a proposed line in an interactive gitrebase to see the corresponding diff
autocmd FileType gitrebase nnoremap <buffer> <silent> S :Cycle<CR>
autocmd FileType gitcommit nnoremap <buffer> <silent> <leader>d :DiffGitCached<CR>:wincmd L<CR>
" }}}

" CONTRIB PLUGINS MAPPINGS AND SETTINGS {{{
" tagbar plugin {{{
nnoremap <silent> <F10> :TagbarToggle<CR>
let g:tagbar_autofocus = 1
let g:tagbar_type_php = {
      \ 'kinds' : [
      \ 'd:constant definitions:1',
      \ 'i:interfaces:1',
      \ 'c:classes:1',
      \ 'f:functions:0',
      \ 'j:javascript functions:1',
      \ ]
      \ }
"}}}
" Fugitive {{{
" Map .. to go back to the parent dir when you are in a git (fugitive)
" tree|blob buffer
autocmd User Fugitive
      \ if fugitive#buffer().type() =~# '^\%(tree\|blob\)$' |
      \   nnoremap <buffer> .. :edit %:h/<CR> |
      \ endif
set <M-d>=d
nnoremap <M-d> :Gdiff<CR>gg]czz
function! s:MyGgrepWrapper()
  let l:input=input("git-grep for: ")
  if l:input == ''
    echo ""
    return
  endif
  execute "Ggrep! " . shellescape(l:input)
  copen
endfunction
nnoremap <leader>gg  :call <SID>MyGgrepWrapper()<CR>
nnoremap <leader>gw  :Gw<CR>
nnoremap <leader>gs  :Gstatus<CR>
nnoremap <M-s> :Gstatus<CR>
nnoremap <leader>gc  :Gcommit -v<CR>
"}}}
" Yankring {{{
set <M-n>=n
set <M-m>=m
let g:yankring_replace_n_pkey = '<M-m>'
let g:yankring_replace_n_nkey = '<M-n>'
" The following is required because it conflicts with tpope's repeat plugin
let g:yankring_map_dot = 0
" Move the cursor to end of the selection after yanking in visual mode
function! YRRunAfterMaps()
  xnoremap y :<C-U>YRYankRange 'v'<CR>`>
endfunction
" defaults, but set just to be sure:
let g:yankring_clipboard_monitor = 1
let g:yankring_manual_clipboard_check = 1
let g:yankring_history_file = '.yankring_history'
"}}}
" Bclose {{{
nnoremap <expr> <C-w><C-d> ((&bufhidden == 'delete') \|\| (&bufhidden == 'wipe')) ? ":bd\<CR>" : ":Bclose\<CR>"
"}}}
" ctrlp {{{
let g:ctrlp_map = '<c-f>'
let g:ctrlp_cmd = 'CtrlPMRUFiles'
" don't let ctrlp handle the current working dir
let g:ctrlp_working_path_mode = 0
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_highlight_match = [1, 'Pmenu']
let g:ctrlp_open_multiple_files = '1vr'
" only jump to the buffer if it‚Äôs opened in the current tab
let g:ctrlp_switch_buffer = 1
set <M-w>=w
set <M-s>=s
set <M-v>=v
set <M-+>=+
let g:ctrlp_prompt_mappings = {
      \ 'PrtInsert("w")':       ['<F2>', '<M-w>'],
      \ 'PrtInsert("s")':       ['<F3>', '<M-s>'],
      \ 'PrtInsert("v")':       ['<F4>', '<M-v>'],
      \ 'PrtInsert("c")':       ['<F6>', '<M-+>'],
      \}
let g:ctrlp_extensions = ['line', 'bookmarkdir']
nnoremap <leader>ab :<C-u>CtrlPBookmarkDirAdd %:p:h<CR>
set <M-b>=b
nnoremap <silent> <M-b> :CtrlPBuffer<CR>
set <M-g>=g
nnoremap <silent> <M-g> :CtrlPLine<CR>
"}}}
" Lusty-Juggler/Explorer {{{
" Lusty-Juggler
let g:LustyJugglerDefaultMappings  = 0
let g:LustyJugglerAltTabMode = 1 "enables the mapping below
nnoremap <silent> <C-\>  :LustyJuggler<CR>
" Lusty-Explorer
let g:LustyExplorerDefaultMappings = 0
nnoremap <silent> <C-b> :LustyFilesystemExplorerFromHere<CR>
"}}}
" Syntastic {{{
let g:syntastic_enable_signs=1
"}}}
" Showmarks {{{
" show only a-z marks in the showmarks plugin
let g:showmarks_include="abcdefghijklmnopqrstuvwxyz"
highlight ShowMarksHLl ctermfg=darkblue ctermbg=blue cterm=NONE guifg=blue guibg=lightblue gui=bold
let g:showmarks_ignore_bt    = "nofile"
"}}}
" Autotag {{{
" Specify 40MB as the maximum size of the tags file to be considered by autotag
let g:autotagmaxTagsFileSize=1024*1024*40
"}}}
" marvim {{{
let g:marvim_store = $HOME.'/.vim/marvim_store/'
let g:marvim_prefix = 0
let g:marvim_find_key = '<F7>'
let g:marvim_store_key = '<F6>'
"}}}
" Powerline {{{
let g:Powerline_cache_file = $HOME.'/.vim/vim_powerline.cache'
let g:Powerline_symbols = 'unicode'
let g:Powerline_colorscheme = 'powerline_grota'
"}}}
" SnipMate {{{
" with some unmappings in after_actions.vim to actually making it work.
" going back is not supported, but whatever.
let g:snips_trigger_key = '<C-B>'
" }}}
" Supertab {{{
let g:SuperTabDefaultCompletionType = "context"
let g:SuperTabLongestHighlight = 1
" Supertab takes care of the following, which are not needed anymore, I keep
" these here for future reference.
" This is done to select the first entry in the menu. Not very useful, but still.
" This also renders the longest value in completeopt pretty useless.
"inoremap <C-X><C-O> <C-X><C-O><C-N><C-P><Down>
"" with menuone in completeopt, the pum is always visible
""inoremap <expr> <C-X><C-O> pumvisible() ? '<C-X><C-O><C-N><C-P>' : '<C-X><C-O>'
"inoremap <expr> <Esc>      pumvisible() ? "\<C-e>" : "\<Esc>"
"inoremap <expr> <CR>       pumvisible() ? "\<C-y>" : "\<CR>"
"}}}
" DirDiff {{{
" ,dj ,dk per diff
for map in ['Get', 'Put', 'Next', 'Prev']
  exec 'nmap <plug>NoopDirDiff'.map.' <Plug>DirDiff'.map
endfor
"}}}
" Gitv {{{
nnoremap <leader>gl :<C-U>Gitv --all<CR>
let g:Gitv_DoNotMapCtrlKey = 1
"}}}
" vimroom {{{
let g:vimroom_sidebar_height = 1
let g:vimroom_width = 80
" I like it a little bit to the left, note this has to be a nmap.
nmap ,V <Plug>VimroomToggle wincmd h<CR> vertical res -20<CR> wincmd p<CR>
"}}}
" SplitJoin {{{
nmap <Leader>sj :SplitjoinJoin<cr>
nmap <Leader>ss :SplitjoinSplit<cr>
" }}}
" autopairs {{{
let g:AutoPairsFlyMode = 1
set <M-/>=/
set <M-e>=e
set <M-p>=p
let g:AutoPairsShortcutJump='<M-/>'
let g:AutoPairsShortcutFastWrap=''
"}}}
" Sparkup {{{
" see the FileType autocommands below for the real mappings
let g:sparkupExecuteMapping = '<Plug>SparkupExecuteMapping'
let g:sparkupNextMapping = '<Plug>SparkupNextMapping'
"}}}
" vitality {{{
let g:vitality_fix_cursor = 0
let g:vitality_change_colors = 0
let g:vitality_color_insertmode = "OrangeRed"
"}}}
" PreciseJump {{{
nmap - :call PreciseJumpF(-1, -1, 0)<cr>
vmap - <ESC>:call PreciseJumpF(-1, -1, 1)<cr>
" also in after_actions to fix race with Yankring
omap - v:call PreciseJumpF(-1, -1, 0)<cr>
" }}}
"}}}

" CUSTOM PLUGINS MAPPINGS AND SETTINGS {{{
" ,qf quickfix toggle {{{
nnoremap <leader>qf :QFix<CR>
"}}}
" ,xs for syntax class {{{
function! SynStack()
  if !exists("*synstack")
    return
  endif
  echo join(map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")'), " > ")
endfunc
nnoremap <leader>xs :call SynStack()<CR>
"}}}
" * and # in visual {{{
function! s:VSetSearch()
  let temp = @@
  norm! gvy
  let @/ = '\V' . substitute(escape(@@, '\'), '\n', '\\n', 'g')
  let @@ = temp
endfunction
xnoremap * :<C-u>call <SID>VSetSearch()<CR>//<CR><c-o>
xnoremap # :<C-u>call <SID>VSetSearch()<CR>??<CR><c-o>
"}}}
" ,hh ,h1 ,h2 ,h3 {{{
nnoremap <silent> <leader>hh :execute 'match InterestingWord1 /\<<c-r><c-w>\>/'<cr>
nnoremap <silent> <leader>h1 :execute 'match InterestingWord1 /\<<c-r><c-w>\>/'<cr>
nnoremap <silent> <leader>h2 :execute '2match InterestingWord2 /\<<c-r><c-w>\>/'<cr>
nnoremap <silent> <leader>h3 :execute '3match InterestingWord3 /\<<c-r><c-w>\>/'<cr>
"}}}
"}}}

" AUTOCOMMANDS {{{
" highlight cursorline only for current window
autocmd WinLeave * setlocal nocursorline
autocmd WinEnter * setlocal cursorline
if version >= 703
  " Enable relativenumber just for php for now
  autocmd FileType php setlocal relativenumber
endif
" Auto close the preview window that pops up in php omnicomplete mode
" DiffGitCached is opened in a preview window so we check for ft=php
autocmd InsertLeave * if (pumvisible() == 0 && &ft ==# 'php')|silent! pclose|endif
" Help on the right
autocmd FileType help wincmd L
" Red line for gitcommit
autocmd FileType gitcommit setlocal colorcolumn=+1
" Quickfix window: no numbers
autocmd Filetype qf setlocal nonumber
" html,xhtml,xml: use Omnicomplete for (super)tab, don't autoclose <>
autocmd Filetype html,xhtml,xml call SuperTabSetDefaultCompletionType("<c-x><c-o>")
      \| let b:delimitMate_matchpairs = "(:),[:],{:}"
autocmd FileType html,xhtml,xml,php nmap <buffer> <leader>se <Plug>SparkupExecuteMapping
      \| imap <buffer> <C-G><C-H> <Plug>SparkupNextMapping
" this matches the conflict markers
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'
au InsertEnter * hi CursorLine ctermbg=17
au InsertLeave * hi CursorLine ctermbg=234
"}}}

" NOTES {{{
" i_<C-z,b> can be remapped
" cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'
" }}}
